{
  "paragraphs": [
    {
      "text": "%md\n# Store and manage Python objects and user-defined functions\n\n## Introduction\n\nThis lab walks you through the steps to use and work with datastores and the script repository.\n\nEstimated Lab Time: 20 minutes\n\n### About Datastore\n**Datastores** exist in the user’s Oracle Database schema. A datastore, and the objects it contains, persist in the database until explicitly deleted. By using a datastore, you can store Python objects in a named datastore entry. This named datastore can then be used in subsequent Python sessions, and even be made available to other users or programs by granting/revoking read permissions.\n\nPython objects, including OML4Py proxy objects, exist for the duration of the current Python session unless you explicitly save them. You can save one or more Python objects, including OML proxy objects, to a named datastore and then load those objects in a later Python session. This is also useful when using embedded Python execution.\nBy using a datastore, you can:\n* Save OML4Py and other Python objects for use across Python sessions\n* Grant or revoke read privilege access to a datastore or its objects to one or more users. You can restore the saved objects in another Python session.\n* Easily pass multiple and non-scalar arguments to Python functions for use in embedded Python execution from Python, REST, and SQL  API. **Note:** SQL and REST APIs support passing scalar values, such as datastore name or numeric values, only.\n* List available datastores and explore datastore contents\n\n### About the Python Script Repository\nOML4Py stores **named user-defined functions** called scripts in the script repository.  You can make scripts either private or global. A private script is available only to the owner. A global script is available to any user. For private scripts, the owner of the script may grant the read privilege to other users or revoke that privilege.\n\n* `oml.script.create` - Creates a script, which contains a single Python function definition, in the script repository.\n* `oml.script.dir` - Lists the scripts present in the script repository.\n* `oml.script.drop` - Drops a script from the script repository.\n* `oml.script.load` - Loads a script from the script repository into a Python session.\n* `oml.grant` - Grants read privilege permission to another user to a datastore or script owned by the current user.\n* `oml.revoke` - Revokes the read privilege permission that was granted to another user to a datastore or script owned by the current user.\n\nTo illustrate using the Python Script Repository, you will define a function `build_lm1` that will fit a regression model. Using this function, you will then create a script named `MyLM_function`.\n\n### Objectives\n\nIn this lab, you will learn how to:\n* Move objects between datastore and a Python sessions\n* Save Python objects in a datastore\n* Save model objects in a datastore\n* Load datastore objects into memory\n* View datastore and its details\n* Manage datastore privileges\n* Delete datastores\n* Use the Python Script Repository\n* Create Scripts in Repository\n* Store a function as a global function\n* Drop scripts from the Script Repository\n\n \nCopyright (c) 2022 Oracle Corporation \n###### <a href=\"https://oss.oracle.com/licenses/upl/\" onclick=\"return ! window.open('https://oss.oracle.com/licenses/upl/');\">The Universal Permissive License (UPL), Version 1.0</a>\n---\n\n## Task 1: Import libraries supporting OML4Py and create data table\n\nTo use OML4Py, first import the module `oml`. Also import the pandas library for pandas-specific functionality.\n\n1.1. Run the following commands to imports the `oml` module and the `Pandas` library. Import the Pandas library to work with oml DataFrames.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:33+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<h1>Store and manage Python objects and user-defined functions</h1>\n<h2>Introduction</h2>\n<p>This lab walks you through the steps to use and work with datastores and the script repository.</p>\n<p>Estimated Lab Time: 20 minutes</p>\n<h3>About Datastore</h3>\n<p><strong>Datastores</strong> exist in the user’s Oracle Database schema. A datastore, and the objects it contains, persist in the database until explicitly deleted. By using a datastore, you can store Python objects in a named datastore entry. This named datastore can then be used in subsequent Python sessions, and even be made available to other users or programs by granting/revoking read permissions.</p>\n<p>Python objects, including OML4Py proxy objects, exist for the duration of the current Python session unless you explicitly save them. You can save one or more Python objects, including OML proxy objects, to a named datastore and then load those objects in a later Python session. This is also useful when using embedded Python execution.\n<br  />By using a datastore, you can:</p>\n<ul>\n<li>Save OML4Py and other Python objects for use across Python sessions</li>\n<li>Grant or revoke read privilege access to a datastore or its objects to one or more users. You can restore the saved objects in another Python session.</li>\n<li>Easily pass multiple and non-scalar arguments to Python functions for use in embedded Python execution from Python, REST, and SQL  API. <strong>Note:</strong> SQL and REST APIs support passing scalar values, such as datastore name or numeric values, only.</li>\n<li>List available datastores and explore datastore contents</li>\n</ul>\n<h3>About the Python Script Repository</h3>\n<p>OML4Py stores <strong>named user-defined functions</strong> called scripts in the script repository.  You can make scripts either private or global. A private script is available only to the owner. A global script is available to any user. For private scripts, the owner of the script may grant the read privilege to other users or revoke that privilege.</p>\n<ul>\n<li><code>oml.script.create</code> - Creates a script, which contains a single Python function definition, in the script repository.</li>\n<li><code>oml.script.dir</code> - Lists the scripts present in the script repository.</li>\n<li><code>oml.script.drop</code> - Drops a script from the script repository.</li>\n<li><code>oml.script.load</code> - Loads a script from the script repository into a Python session.</li>\n<li><code>oml.grant</code> - Grants read privilege permission to another user to a datastore or script owned by the current user.</li>\n<li><code>oml.revoke</code> - Revokes the read privilege permission that was granted to another user to a datastore or script owned by the current user.</li>\n</ul>\n<p>To illustrate using the Python Script Repository, you will define a function <code>build_lm1</code> that will fit a regression model. Using this function, you will then create a script named <code>MyLM_function</code>.</p>\n<h3>Objectives</h3>\n<p>In this lab, you will learn how to:</p>\n<ul>\n<li>Move objects between datastore and a Python sessions</li>\n<li>Save Python objects in a datastore</li>\n<li>Save model objects in a datastore</li>\n<li>Load datastore objects into memory</li>\n<li>View datastore and its details</li>\n<li>Manage datastore privileges</li>\n<li>Delete datastores</li>\n<li>Use the Python Script Repository</li>\n<li>Create Scripts in Repository</li>\n<li>Store a function as a global function</li>\n<li>Drop scripts from the Script Repository</li>\n</ul>\n<p>Copyright (c) 2022 Oracle Corporation</p>\n<h6><a href=\"https: //oss.oracle.com/licenses/upl/\" onclick=\"return ! window.open('https://oss.oracle.com/licenses/upl/');\">The Universal Permissive License (UPL), Version 1.0</a></h6>\n<hr />\n<h2>Task 1: Import libraries supporting OML4Py and create data table</h2>\n<p>To use OML4Py, first import the module <code>oml</code>. Also import the pandas library for pandas-specific functionality.</p>\n<p>1.1. Run the following commands to imports the <code>oml</code> module and the <code>Pandas</code> library. Import the Pandas library to work with oml DataFrames.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091968_-1042363855",
      "id": "20220720-080131_1852876030",
      "dateCreated": "2021-03-20T07:54:35+0000",
      "dateStarted": "2022-07-20T08:23:33+0000",
      "dateFinished": "2022-07-20T08:23:33+0000",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:40"
    },
    {
      "text": "%python\n\nimport pandas as pd\nimport oml",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:33+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091968_1567199905",
      "id": "20220720-080131_497493884",
      "dateCreated": "2021-03-20T08:01:16+0000",
      "dateStarted": "2022-07-20T08:23:34+0000",
      "dateFinished": "2022-07-20T08:23:43+0000",
      "status": "FINISHED",
      "$$hashKey": "object:41"
    },
    {
      "text": "%md\n## Task 2: Create Pandas DataFrames and load them into Autonomous Database\n\nIn this step, you will work with three data set - IRIS data set, Diabetes data set, and Boston data set. Here, you will learn how to:\n\n* Load these three data sets and for each combine the target and predictors into a single DataFrame\n* Create and display the columns for each data set\n* Use the dataframe to explore the datastore functionality\n\n2.1. Run the following command to sync the IRIS table in the OMLUSER schema to an OML DataFrame proxy object:",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:43+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<h2>Task 2: Create Pandas DataFrames and load them into Autonomous Database</h2>\n<p>In this step, you will work with three data set - IRIS data set, Diabetes data set, and Boston data set. Here, you will learn how to:</p>\n<ul>\n<li>Load these three data sets and for each combine the target and predictors into a single DataFrame</li>\n<li>Create and display the columns for each data set</li>\n<li>Use the dataframe to explore the datastore functionality</li>\n</ul>\n<p>2.1. Run the following command to sync the IRIS table in the OMLUSER schema to an OML DataFrame proxy object:</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091968_-1278559592",
      "id": "20220720-080131_1890625269",
      "dateCreated": "2021-03-20T08:01:23+0000",
      "dateStarted": "2022-07-20T08:23:43+0000",
      "dateFinished": "2022-07-20T08:23:43+0000",
      "status": "FINISHED",
      "$$hashKey": "object:42"
    },
    {
      "text": "%python\n\nIRIS = oml.sync(\"OMLUSER\", view = \"IRIS_VIEW\")\n\nprint(IRIS.columns)",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:44+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "['SEPAL_LENGTH', 'SEPAL_WIDTH', 'PETAL_LENGTH', 'PETAL_WIDTH', 'SPECIES']\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1048289189",
      "id": "20220720-080131_1178064057",
      "dateCreated": "2021-03-20T08:01:23+0000",
      "dateStarted": "2022-07-20T08:23:44+0000",
      "dateFinished": "2022-07-20T08:23:44+0000",
      "status": "FINISHED",
      "$$hashKey": "object:43"
    },
    {
      "text": "%md\n---\n2.2. Run the following script to create the temporary Diabetes table:",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:44+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>2.2. Run the following script to create the temporary Diabetes table:</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1123168051",
      "id": "20220720-080131_764137429",
      "dateCreated": "2021-03-20T08:01:23+0000",
      "dateStarted": "2022-07-20T08:23:44+0000",
      "dateFinished": "2022-07-20T08:23:44+0000",
      "status": "FINISHED",
      "$$hashKey": "object:44"
    },
    {
      "text": "%python\n\nfrom sklearn import datasets\ndiabetes = datasets.load_diabetes()\nx = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)\ny = pd.DataFrame(diabetes.target, columns=['disease_progression'])\n\nDIABETES_TMP = oml.push(pd.concat([x, y], axis=1))\nprint(DIABETES_TMP.columns)",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:44+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6', 'disease_progression']\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_539686990",
      "id": "20220720-080131_154374623",
      "dateCreated": "2021-03-20T08:01:23+0000",
      "dateStarted": "2022-07-20T08:23:45+0000",
      "dateFinished": "2022-07-20T08:23:45+0000",
      "status": "FINISHED",
      "$$hashKey": "object:45"
    },
    {
      "text": "%md\n---\n2.3. Run the following script to create the Boston table:",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:45+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>2.3. Run the following script to create the Boston table:</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_96798954",
      "id": "20220720-080131_2084641026",
      "dateCreated": "2021-03-20T08:01:23+0000",
      "dateStarted": "2022-07-20T08:23:45+0000",
      "dateFinished": "2022-07-20T08:23:45+0000",
      "status": "FINISHED",
      "$$hashKey": "object:46"
    },
    {
      "text": "%python\n\nboston = datasets.load_boston()\nx = pd.DataFrame(boston.data, columns = boston.feature_names.tolist())\ny = pd.DataFrame(boston.target, columns = ['Value'])\n\nBOSTON_TMP = oml.push(pd.concat([x, y], axis=1))\nprint(BOSTON_TMP.columns)",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:45+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'Value']\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1209497411",
      "id": "20220720-080131_78350383",
      "dateCreated": "2021-03-20T08:01:23+0000",
      "dateStarted": "2022-07-20T08:23:46+0000",
      "dateFinished": "2022-07-20T08:23:46+0000",
      "status": "FINISHED",
      "$$hashKey": "object:47"
    },
    {
      "text": "%md\n## Task 3: Save Python objects to a named datastore \n\nIn this task you will save the actual iris data set and the temporary BOSTON proxy object to a datastore named `ds_pydata`, overwriting if the named datastore already exists.\n\n**Note:** You can store actual data objects in a datastore, but large data objects should remain as database tables for performance and scalability.    \n\nBy storing the `BOSTON_TMP` object, the temporary table will not be deleted when the session terminates.\n\n3.1. Run the following script to save the `IRIS` and `BOSTON_TMP` tables in the Autonomous Database:",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:46+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<h2>Task 3: Save Python objects to a named datastore</h2>\n<p>In this task you will save the actual iris data set and the temporary BOSTON proxy object to a datastore named <code>ds_pydata</code>, overwriting if the named datastore already exists.</p>\n<p><strong>Note:</strong> You can store actual data objects in a datastore, but large data objects should remain as database tables for performance and scalability.</p>\n<p>By storing the <code>BOSTON_TMP</code> object, the temporary table will not be deleted when the session terminates.</p>\n<p>3.1. Run the following script to save the <code>IRIS</code> and <code>BOSTON_TMP</code> tables in the Autonomous Database:</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1758899098",
      "id": "20220720-080131_1999440392",
      "dateCreated": "2021-03-20T08:01:23+0000",
      "dateStarted": "2022-07-20T08:23:46+0000",
      "dateFinished": "2022-07-20T08:23:46+0000",
      "status": "FINISHED",
      "$$hashKey": "object:48"
    },
    {
      "text": "%python\n\noml.ds.save(objs={'oml_iris':IRIS, 'oml_boston':BOSTON_TMP},\n            name=\"ds_pydata\", description = \"python datasets\",\n            overwrite=True)",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:46+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_39905235",
      "id": "20220720-080131_1644544091",
      "dateCreated": "2021-03-20T08:01:22+0000",
      "dateStarted": "2022-07-20T08:23:47+0000",
      "dateFinished": "2022-07-20T08:23:50+0000",
      "status": "FINISHED",
      "$$hashKey": "object:49"
    },
    {
      "text": "%md\n---\n3.2. Save the `DIABETES_TMP` tables into the database.\n\n**Note:** The condition `append=TRUE` adds the object to the datastore, if it already exists.  The default is `append=False`, and in that case, you will receive an error stating that the datastore exists and it won't be able to create it again.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:50+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>3.2. Save the <code>DIABETES_TMP</code> tables into the database.</p>\n<p><strong>Note:</strong> The condition <code>append=TRUE</code> adds the object to the datastore, if it already exists.  The default is <code>append=False</code>, and in that case, you will receive an error stating that the datastore exists and it won't be able to create it again.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-666786461",
      "id": "20220720-080131_376982544",
      "dateCreated": "2021-03-20T08:01:22+0000",
      "dateStarted": "2022-07-20T08:23:50+0000",
      "dateFinished": "2022-07-20T08:23:50+0000",
      "status": "FINISHED",
      "$$hashKey": "object:50"
    },
    {
      "text": "%python\n\noml.ds.save(objs={'oml_diabetes':DIABETES_TMP}, name=\"ds_pydata\", append=True)",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:50+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1949192968",
      "id": "20220720-080131_1313489920",
      "dateCreated": "2021-03-20T08:01:22+0000",
      "dateStarted": "2022-07-20T08:23:50+0000",
      "dateFinished": "2022-07-20T08:23:51+0000",
      "status": "FINISHED",
      "$$hashKey": "object:51"
    },
    {
      "text": "%md\n---\n3.3. Save the `IRIS` table to a new datastore, and then list the datastores. Notice that you see the datastore name, the number of objects in the datastore, the size in bytes consumed, when the datastore was create/updated, and any description provided by the user. The two datastores `ds_iris_data` and `ds_pydata` are present, with the latter containing the three objects you added.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:51+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>3.3. Save the <code>IRIS</code> table to a new datastore, and then list the datastores. Notice that you see the datastore name, the number of objects in the datastore, the size in bytes consumed, when the datastore was create/updated, and any description provided by the user. The two datastores <code>ds_iris_data</code> and <code>ds_pydata</code> are present, with the latter containing the three objects you added.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1613250250",
      "id": "20220720-080131_1369995915",
      "dateCreated": "2021-03-20T08:01:22+0000",
      "dateStarted": "2022-07-20T08:23:51+0000",
      "dateFinished": "2022-07-20T08:23:51+0000",
      "status": "FINISHED",
      "$$hashKey": "object:52"
    },
    {
      "text": "%python\n\noml.ds.save(objs={'iris':IRIS},\nname=\"ds_iris_data\", description = \"iris dataset\", overwrite=True)\n\nz.show(oml.ds.dir())",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:51+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 194,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "datastore_name": "string",
                      "object_count": "string",
                      "size": "string",
                      "date": "string",
                      "description": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "datastore_name\tobject_count\tsize\tdate\tdescription\nPredictPurchaseModel\t1\t673\t2022-03-19 15:30:36\tNone\nauc_result_ftr\t1\t21\t2021-07-02 19:10:24\tNone\nautoml results\t3\t908\t2022-05-02 19:58:02\tNone\nds-1\t3\t1812\t2022-05-05 21:20:18\tNone\nds1\t1\t1296\t2022-05-26 18:02:47\tNone\nds2\t1\t1296\t2022-05-26 18:03:37\tNone\nds3\t1\t1296\t2022-05-26 17:14:43\tNone\nds4\t1\t1296\t2022-05-26 17:14:52\tNone\nds_iris_data\t1\t699\t2022-07-20 08:23:53\tiris dataset\nds_pydata\t3\t2628\t2022-07-20 08:23:47\tpython datasets\nds_rf_species\t1\t164925\t2021-06-28 22:39:44\tRandom Forest model predicting Species from IRIS\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1153202184",
      "id": "20220720-080131_501448701",
      "dateCreated": "2021-03-20T08:01:22+0000",
      "dateStarted": "2022-07-20T08:23:52+0000",
      "dateFinished": "2022-07-20T08:23:53+0000",
      "status": "FINISHED",
      "$$hashKey": "object:53"
    },
    {
      "text": "%md\n## Task 4: Save model objects in a datastore\n\nThis task illustrates how to store other types of objects in datastores. For this, you will create regression models using sklearn and OML4Py.\n\n4.1. Run the following script to build two regression models - `regr1` and `regr2`. The `regr1` uses the open  source function `LinearRegression()` and the `regr2` uses the OML function `oml.glm()`.\n\n**Note:** This highlights that both open source models and in-database model proxy objects can be stored in a datastore. Like tables created using `oml.push` function, default-named model proxy objects are dropped at the end of the database connection unless they are saved in a datastore.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:53+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<h2>Task 4: Save model objects in a datastore</h2>\n<p>This task illustrates how to store other types of objects in datastores. For this, you will create regression models using sklearn and OML4Py.</p>\n<p>4.1. Run the following script to build two regression models - <code>regr1</code> and <code>regr2</code>. The <code>regr1</code> uses the open  source function <code>LinearRegression()</code> and the <code>regr2</code> uses the OML function <code>oml.glm()</code>.</p>\n<p><strong>Note:</strong> This highlights that both open source models and in-database model proxy objects can be stored in a datastore. Like tables created using <code>oml.push</code> function, default-named model proxy objects are dropped at the end of the database connection unless they are saved in a datastore.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-612264281",
      "id": "20220720-080131_1236252829",
      "dateCreated": "2021-03-20T08:01:22+0000",
      "dateStarted": "2022-07-20T08:23:53+0000",
      "dateFinished": "2022-07-20T08:23:53+0000",
      "status": "FINISHED",
      "$$hashKey": "object:54"
    },
    {
      "text": "%python\n\nfrom sklearn import linear_model\n\nregr1 = linear_model.LinearRegression()\nregr1.fit(boston.data, boston.target)\n\nregr2 = oml.glm(\"regression\")\nX = BOSTON_TMP.drop('Value')\ny = BOSTON_TMP['Value']\nregr2 = regr2.fit(X, y)",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:53+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1303921079",
      "id": "20220720-080131_1440321516",
      "dateCreated": "2021-03-20T08:03:13+0000",
      "dateStarted": "2022-07-20T08:23:53+0000",
      "dateFinished": "2022-07-20T08:23:55+0000",
      "status": "FINISHED",
      "$$hashKey": "object:55"
    },
    {
      "text": "%md\n---\n4.2. Run the following script to save the objects `regr1` and `regr2` to the datastore `ds_pymodels`, and allow the read privilege to be granted to them.\n\n**Note:** `overwrite=True` indicates that the contents of the datastore should be replaced.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:55+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>4.2. Run the following script to save the objects <code>regr1</code> and <code>regr2</code> to the datastore <code>ds_pymodels</code>, and allow the read privilege to be granted to them.</p>\n<p><strong>Note:</strong> <code>overwrite=True</code> indicates that the contents of the datastore should be replaced.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-748604981",
      "id": "20220720-080131_1194839038",
      "dateCreated": "2021-03-20T08:03:13+0000",
      "dateStarted": "2022-07-20T08:23:55+0000",
      "dateFinished": "2022-07-20T08:23:55+0000",
      "status": "FINISHED",
      "$$hashKey": "object:56"
    },
    {
      "text": "%python\n\noml.ds.save(objs={'regr1':regr1, 'regr2':regr2},\n            name=\"ds_pymodels\", grantable=True,\n            overwrite=True)\n\nz.show(oml.ds.dir())",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:55+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 224,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "datastore_name": "string",
                      "object_count": "string",
                      "size": "string",
                      "date": "string",
                      "description": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "datastore_name\tobject_count\tsize\tdate\tdescription\nPredictPurchaseModel\t1\t673\t2022-03-19 15:30:36\tNone\nauc_result_ftr\t1\t21\t2021-07-02 19:10:24\tNone\nautoml results\t3\t908\t2022-05-02 19:58:02\tNone\nds-1\t3\t1812\t2022-05-05 21:20:18\tNone\nds1\t1\t1296\t2022-05-26 18:02:47\tNone\nds2\t1\t1296\t2022-05-26 18:03:37\tNone\nds3\t1\t1296\t2022-05-26 17:14:43\tNone\nds4\t1\t1296\t2022-05-26 17:14:52\tNone\nds_iris_data\t1\t699\t2022-07-20 08:23:53\tiris dataset\nds_pydata\t3\t2628\t2022-07-20 08:23:47\tpython datasets\nds_pymodels\t2\t4412\t2022-07-20 08:23:56\tNone\nds_rf_species\t1\t164925\t2021-06-28 22:39:44\tRandom Forest model predicting Species from IRIS\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1605398511",
      "id": "20220720-080131_1101875314",
      "dateCreated": "2021-03-20T08:03:13+0000",
      "dateStarted": "2022-07-20T08:23:56+0000",
      "dateFinished": "2022-07-20T08:23:56+0000",
      "status": "FINISHED",
      "$$hashKey": "object:57"
    },
    {
      "text": "%md\n---\n4.3. Now grant the read privilege to all users by specifying `user=None`. Finally, list the datastores to which the read privilege has been granted.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:56+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>4.3. Now grant the read privilege to all users by specifying <code>user=None</code>. Finally, list the datastores to which the read privilege has been granted.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_2078260887",
      "id": "20220720-080131_1970432906",
      "dateCreated": "2021-03-20T08:03:13+0000",
      "dateStarted": "2022-07-20T08:23:56+0000",
      "dateFinished": "2022-07-20T08:23:56+0000",
      "status": "FINISHED",
      "$$hashKey": "object:58"
    },
    {
      "text": "%python\n\noml.grant(name=\"ds_pymodels\", typ=\"datastore\", user=None)\n\noml.ds.dir(dstype=\"grant\")",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:56+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "  datastore_name grantee\n0    ds_pymodels  PUBLIC\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1411089418",
      "id": "20220720-080131_1825385511",
      "dateCreated": "2021-03-20T08:03:13+0000",
      "dateStarted": "2022-07-20T08:23:56+0000",
      "dateFinished": "2022-07-20T08:23:58+0000",
      "status": "FINISHED",
      "$$hashKey": "object:59"
    },
    {
      "text": "%md\n## Task 5:  Load datastore objects into memory\n\nIn this step, you load all Python objects from a datastore to the global workspace and sort the result by name. Notice that they have the name specified in the dictionary when saved.\n\n5.1. Run the following script to load the datastore `ds_pydata` into memory:",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:58+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<h2>Task 5:  Load datastore objects into memory</h2>\n<p>In this step, you load all Python objects from a datastore to the global workspace and sort the result by name. Notice that they have the name specified in the dictionary when saved.</p>\n<p>5.1. Run the following script to load the datastore <code>ds_pydata</code> into memory:</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_741619840",
      "id": "20220720-080131_358380155",
      "dateCreated": "2021-03-20T08:03:13+0000",
      "dateStarted": "2022-07-20T08:23:59+0000",
      "dateFinished": "2022-07-20T08:23:59+0000",
      "status": "FINISHED",
      "$$hashKey": "object:60"
    },
    {
      "text": "%python\n\nsorted(oml.ds.load(name=\"ds_pydata\"))",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:23:59+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "['oml_boston', 'oml_diabetes', 'oml_iris']\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_87785682",
      "id": "20220720-080131_1041847930",
      "dateCreated": "2021-03-20T08:03:13+0000",
      "dateStarted": "2022-07-20T08:23:59+0000",
      "dateFinished": "2022-07-20T08:24:01+0000",
      "status": "FINISHED",
      "$$hashKey": "object:61"
    },
    {
      "text": "%md\n---\n5.2. Run the following script to load the named Python object `regr2` (regression model), from the datastore to the global workspace.\n\n**Note:** Using the boolean `to_globals` parameter, you can specify whether the objects are loaded to a global workspace or to a dictionary object. If the argument is `to_globals=True`, then `oml.ds.load` function loads the objects into the global workspace. If the argument is `to_globals=False`, then the function returns a dict object that contains pairs of object names and values.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:01+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>5.2. Run the following script to load the named Python object <code>regr2</code> (regression model), from the datastore to the global workspace.</p>\n<p><strong>Note:</strong> Using the boolean <code>to_globals</code> parameter, you can specify whether the objects are loaded to a global workspace or to a dictionary object. If the argument is <code>to_globals=True</code>, then <code>oml.ds.load</code> function loads the objects into the global workspace. If the argument is <code>to_globals=False</code>, then the function returns a dict object that contains pairs of object names and values.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1240469631",
      "id": "20220720-080131_1490109448",
      "dateCreated": "2021-03-20T08:03:12+0000",
      "dateStarted": "2022-07-20T08:24:01+0000",
      "dateFinished": "2022-07-20T08:24:01+0000",
      "status": "FINISHED",
      "$$hashKey": "object:62"
    },
    {
      "text": "%python\n\noml.ds.load(name=\"ds_pymodels\", objs=[\"regr2\"], to_globals=True)",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:01+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "['regr2']\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1204624257",
      "id": "20220720-080131_1568204577",
      "dateCreated": "2021-03-20T08:03:12+0000",
      "dateStarted": "2022-07-20T08:24:01+0000",
      "dateFinished": "2022-07-20T08:24:03+0000",
      "status": "FINISHED",
      "$$hashKey": "object:63"
    },
    {
      "text": "%md\n---\n5.3. Run the following script to view the model details",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:03+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>5.3. Run the following script to view the model details</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-23019112",
      "id": "20220720-080131_734107999",
      "dateCreated": "2021-03-20T08:04:36+0000",
      "dateStarted": "2022-07-20T08:24:03+0000",
      "dateFinished": "2022-07-20T08:24:03+0000",
      "status": "FINISHED",
      "$$hashKey": "object:64"
    },
    {
      "text": "%python\n\nregr2",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:03+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nAlgorithm Name: Generalized Linear Model\n\nMining Function: REGRESSION\n\nTarget: Value\n\nSettings: \n                   setting name                  setting value\n0                     ALGO_NAME  ALGO_GENERALIZED_LINEAR_MODEL\n1               GLMS_CONF_LEVEL                            .95\n2           GLMS_FTR_GENERATION    GLMS_FTR_GENERATION_DISABLE\n3            GLMS_FTR_SELECTION     GLMS_FTR_SELECTION_DISABLE\n4                  ODMS_DETAILS                    ODMS_ENABLE\n5  ODMS_MISSING_VALUE_TREATMENT        ODMS_MISSING_VALUE_AUTO\n6                 ODMS_SAMPLING          ODMS_SAMPLING_DISABLE\n7                     PREP_AUTO                             ON\n\nComputed Settings: \n            setting name            setting value\n0    GLMS_CONV_TOLERANCE  .0000050000000000000004\n1    GLMS_NUM_ITERATIONS                       30\n2  GLMS_RIDGE_REGRESSION   GLMS_RIDGE_REG_DISABLE\n3            GLMS_SOLVER         GLMS_SOLVER_CHOL\n\nGlobal Statistics: \n             attribute name attribute value\n0         ADJUSTED_R_SQUARE         0.73379\n1                       AIC         1589.64\n2                 COEFF_VAR         21.0595\n3                 CONVERGED             YES\n4        CORRECTED_TOTAL_DF             505\n5          CORRECTED_TOT_SS         42716.3\n6            DEPENDENT_MEAN         22.5328\n7                  ERROR_DF             492\n8         ERROR_MEAN_SQUARE         22.5179\n9         ERROR_SUM_SQUARES         11078.8\n10                  F_VALUE         108.077\n11                    GMSEP         23.1597\n12               HOCKING_SP       0.0458612\n13                      J_P         23.1409\n14                 MODEL_DF              13\n15          MODEL_F_P_VALUE               0\n16        MODEL_MEAN_SQUARE         2433.65\n17        MODEL_SUM_SQUARES         31637.5\n18               NUM_PARAMS              14\n19                 NUM_ROWS             506\n20          RANK_DEFICIENCY               0\n21             ROOT_MEAN_SQ          4.7453\n22                     R_SQ        0.740643\n23                     SBIC         1648.81\n24  VALID_COVARIANCE_MATRIX             YES\n\nAttributes: \nAGE\nB\nCHAS\nCRIM\nDIS\nINDUS\nLSTAT\nNOX\nPTRATIO\nRAD\nRM\nTAX\nZN\n\nPartition: NO\n\nCoefficients: \n\n   attribute name attribute value  ...       p value  significance code\n0     (Intercept)            None  ...  3.283438e-12                ***\n1             AGE            None  ...  9.582293e-01                   \n2               B            None  ...  5.728592e-04                ***\n3            CHAS            None  ...  1.925030e-03                 **\n4            CRIM            None  ...  1.086810e-03                 **\n5             DIS            None  ...  6.013491e-13                ***\n6           INDUS            None  ...  7.382881e-01                   \n7           LSTAT            None  ...  7.776912e-23                ***\n8             NOX            None  ...  4.245644e-06                ***\n9         PTRATIO            None  ...  1.308835e-12                ***\n10            RAD            None  ...  5.070529e-06                ***\n11             RM            None  ...  1.979441e-18                ***\n12            TAX            None  ...  1.111637e-03                 **\n13             ZN            None  ...  7.781097e-04                ***\n\n[14 rows x 7 columns]\n\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 '\n\nFit Details: \n\n                       name         value\n0         ADJUSTED_R_SQUARE      0.733790\n1                       AIC   1589.642798\n2                 COEFF_VAR     21.059508\n3        CORRECTED_TOTAL_DF    505.000000\n4          CORRECTED_TOT_SS  42716.295415\n5            DEPENDENT_MEAN     22.532806\n6                  ERROR_DF    492.000000\n7         ERROR_MEAN_SQUARE     22.517855\n8         ERROR_SUM_SQUARES  11078.784578\n9                   F_VALUE    108.076666\n10                    GMSEP     23.159731\n11               HOCKING_SP      0.045861\n12                      J_P     23.140878\n13          MODEL_CONVERGED      1.000000\n14                 MODEL_DF     13.000000\n15          MODEL_F_P_VALUE      0.000000\n16        MODEL_MEAN_SQUARE   2433.654680\n17        MODEL_SUM_SQUARES  31637.510837\n18               NUM_PARAMS     14.000000\n19                 NUM_ROWS    506.000000\n20          RANK_DEFICIENCY      0.000000\n21             ROOT_MEAN_SQ      4.745298\n22                     R_SQ      0.740643\n23                     SBIC   1648.814312\n24  VALID_COVARIANCE_MATRIX      1.000000\n\nRank: \n\n14\n\nDeviance: \n\n11078.784578\n\nAIC: \n\n1590\n\nNull Deviance: \n\n42716.295415\n\nDF Residual: \n\n492.0\n\nDF Null: \n\n505.0\n\nConverged: \n\nTrue\n\n\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1776739372",
      "id": "20220720-080131_1604296923",
      "dateCreated": "2021-03-20T08:04:36+0000",
      "dateStarted": "2022-07-20T08:24:04+0000",
      "dateFinished": "2022-07-20T08:24:04+0000",
      "status": "FINISHED",
      "$$hashKey": "object:65"
    },
    {
      "text": "%md\n---\n5.4. Run the following script to load the named Python object `regr1`, from the datastore to the user's workspace.\n\n**Note:** Using the boolean `to_globals` parameter, you can specify whether the objects are loaded to a global workspace or to a dictionary object. If the argument is `to_globals=True`, then `oml.ds.load` function loads the objects into the global workspace. If the argument is `to_globals=False`, then the function returns a dict object that contains pairs of object names and values.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:04+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>5.4. Run the following script to load the named Python object <code>regr1</code>, from the datastore to the user's workspace.</p>\n<p><strong>Note:</strong> Using the boolean <code>to_globals</code> parameter, you can specify whether the objects are loaded to a global workspace or to a dictionary object. If the argument is <code>to_globals=True</code>, then <code>oml.ds.load</code> function loads the objects into the global workspace. If the argument is <code>to_globals=False</code>, then the function returns a dict object that contains pairs of object names and values.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1345150029",
      "id": "20220720-080131_222060068",
      "dateCreated": "2021-03-20T08:04:36+0000",
      "dateStarted": "2022-07-20T08:24:04+0000",
      "dateFinished": "2022-07-20T08:24:04+0000",
      "status": "FINISHED",
      "$$hashKey": "object:66"
    },
    {
      "text": "%python\n\noml.ds.load(name=\"ds_pymodels\", objs=[\"regr1\"], to_globals=False)",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:04+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "{'regr1': LinearRegression()}\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1246822094",
      "id": "20220720-080131_392687949",
      "dateCreated": "2021-03-20T08:04:36+0000",
      "dateStarted": "2022-07-20T08:24:04+0000",
      "dateFinished": "2022-07-20T08:24:05+0000",
      "status": "FINISHED",
      "$$hashKey": "object:67"
    },
    {
      "text": "%md\n## Task 6: View datastores and other details\n\nThis task shows how to work with datastores.\n\n6.1. Run the following script to get the list of named datastore entries and a count of the objects in each.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:05+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<h2>Task 6: View datastores and other details</h2>\n<p>This task shows how to work with datastores.</p>\n<p>6.1. Run the following script to get the list of named datastore entries and a count of the objects in each.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1197390884",
      "id": "20220720-080131_818649503",
      "dateCreated": "2021-03-20T08:04:36+0000",
      "dateStarted": "2022-07-20T08:24:06+0000",
      "dateFinished": "2022-07-20T08:24:06+0000",
      "status": "FINISHED",
      "$$hashKey": "object:68"
    },
    {
      "text": "%python\n\nz.show(oml.ds.dir(dstype=\"all\")[['owner', 'datastore_name', 'object_count']])",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:06+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 204,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "owner": "string",
                      "datastore_name": "string",
                      "object_count": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "owner\tdatastore_name\tobject_count\nOMLUSER\tPredictPurchaseModel\t1\nOMLUSER\tauc_result_ftr\t1\nOMLUSER\tautoml results\t3\nOMLUSER\tds-1\t3\nOMLUSER\tds1\t1\nOMLUSER\tds2\t1\nOMLUSER\tds3\t1\nOMLUSER\tds4\t1\nOMLUSER\tds_iris_data\t1\nOMLUSER\tds_pydata\t3\nOMLUSER\tds_pymodels\t2\nOMLUSER\tds_rf_species\t1\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1935095359",
      "id": "20220720-080131_317746725",
      "dateCreated": "2021-03-20T08:05:14+0000",
      "dateStarted": "2022-07-20T08:24:06+0000",
      "dateFinished": "2022-07-20T08:24:07+0000",
      "status": "FINISHED",
      "$$hashKey": "object:69"
    },
    {
      "text": "%md\n---\n6.2. Run the following script to list the datastores to which other users have been granted the read privilege:",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:07+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>6.2. Run the following script to list the datastores to which other users have been granted the read privilege:</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1203329922",
      "id": "20220720-080131_2110971681",
      "dateCreated": "2021-03-20T08:05:13+0000",
      "dateStarted": "2022-07-20T08:24:07+0000",
      "dateFinished": "2022-07-20T08:24:07+0000",
      "status": "FINISHED",
      "$$hashKey": "object:70"
    },
    {
      "text": "%python\n\noml.ds.dir(dstype=\"grant\")",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:07+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "  datastore_name grantee\n0    ds_pymodels  PUBLIC\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1210346196",
      "id": "20220720-080131_1427616847",
      "dateCreated": "2021-03-20T08:05:33+0000",
      "dateStarted": "2022-07-20T08:24:07+0000",
      "dateFinished": "2022-07-20T08:24:08+0000",
      "status": "FINISHED",
      "$$hashKey": "object:71"
    },
    {
      "text": "%md\n## Task 7: View contents of a datastore\n\nThis task shows how to view and describe the content of a datastore. This example shows the `ds_pydata` datastore. Notice that the three proxy objects are listed.\n\n7.1. Run the following script to list the content of a datastore. The script returns the description of three proxy objects - `oml_iris`, `oml_boston`, and `oml_diabetes`. It lists the class, size, length, row and column count for each object.     \n",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:08+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<h2>Task 7: View contents of a datastore</h2>\n<p>This task shows how to view and describe the content of a datastore. This example shows the <code>ds_pydata</code> datastore. Notice that the three proxy objects are listed.</p>\n<p>7.1. Run the following script to list the content of a datastore. The script returns the description of three proxy objects - <code>oml_iris</code>, <code>oml_boston</code>, and <code>oml_diabetes</code>. It lists the class, size, length, row and column count for each object.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_531846696",
      "id": "20220720-080131_972867603",
      "dateCreated": "2021-03-20T08:05:33+0000",
      "dateStarted": "2022-07-20T08:24:09+0000",
      "dateFinished": "2022-07-20T08:24:09+0000",
      "status": "FINISHED",
      "$$hashKey": "object:72"
    },
    {
      "text": "%python\n\nz.show(oml.ds.describe(name='ds_pydata'))",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:09+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 164,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "object_name": "string",
                      "class": "string",
                      "size": "string",
                      "length": "string",
                      "row_count": "string",
                      "col_count": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "object_name\tclass\tsize\tlength\trow_count\tcol_count\noml_boston\toml.DataFrame\t1020\t506\t506\t14\noml_diabetes\toml.DataFrame\t910\t442\t442\t11\noml_iris\toml.DataFrame\t698\t150\t150\t5\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1327624824",
      "id": "20220720-080131_686557263",
      "dateCreated": "2021-03-20T08:05:33+0000",
      "dateStarted": "2022-07-20T08:24:09+0000",
      "dateFinished": "2022-07-20T08:24:09+0000",
      "status": "FINISHED",
      "$$hashKey": "object:73"
    },
    {
      "text": "%md\n## Task 8: Manage datastore privileges\n\nThis task shows how to revoke read privilege, show datastores to which the read privilege has been granted, and again grant read privilege to a user.\n\n8.1. Run the following script to revoke the read privilege from every user:",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:10+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<h2>Task 8: Manage datastore privileges</h2>\n<p>This task shows how to revoke read privilege, show datastores to which the read privilege has been granted, and again grant read privilege to a user.</p>\n<p>8.1. Run the following script to revoke the read privilege from every user:</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1409539921",
      "id": "20220720-080131_1135403428",
      "dateCreated": "2021-03-20T08:04:36+0000",
      "dateStarted": "2022-07-20T08:24:10+0000",
      "dateFinished": "2022-07-20T08:24:10+0000",
      "status": "FINISHED",
      "$$hashKey": "object:74"
    },
    {
      "text": "%python\n\noml.revoke(name=\"ds_pymodels\", typ=\"datastore\", user=None)\n\noml.ds.dir(dstype=\"grant\")",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:10+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Empty DataFrame\nColumns: [datastore_name, grantee]\nIndex: []\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_389171758",
      "id": "20220720-080131_728858706",
      "dateCreated": "2021-03-20T08:06:04+0000",
      "dateStarted": "2022-07-20T08:24:10+0000",
      "dateFinished": "2022-07-20T08:24:10+0000",
      "status": "FINISHED",
      "$$hashKey": "object:75"
    },
    {
      "text": "%md\n---\n8.2. Run the following script to grant read privilege to `OMLUSER2`.\n\nNote: If you are running this Notebook on your own tenancy, make sure to follow the instructions on creationg a new OMLUSER2, otherwise you will get an error. ",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:10+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>8.2. Run the following script to grant read privilege to <code>OMLUSER2</code>.</p>\n<p>Note: If you are running this Notebook on your own tenancy, make sure to follow the instructions on creationg a new OMLUSER2, otherwise you will get an error.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1953072881",
      "id": "20220720-080131_1947367807",
      "dateCreated": "2021-03-20T08:06:04+0000",
      "dateStarted": "2022-07-20T08:24:11+0000",
      "dateFinished": "2022-07-20T08:24:11+0000",
      "status": "FINISHED",
      "$$hashKey": "object:76"
    },
    {
      "text": "%python\n\noml.grant(name=\"ds_pymodels\", typ=\"datastore\", user=\"OMLUSER2\")\n\noml.ds.dir(dstype=\"grant\")",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:11+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "  datastore_name   grantee\n0    ds_pymodels  OMLUSER2\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1516567106",
      "id": "20220720-080131_1014278594",
      "dateCreated": "2021-03-20T08:06:04+0000",
      "dateStarted": "2022-07-20T08:24:11+0000",
      "dateFinished": "2022-07-20T08:24:11+0000",
      "status": "FINISHED",
      "$$hashKey": "object:77"
    },
    {
      "text": "%md\n## Task 9: Delete Datastore Content\n\nThis task shows how to use the `oml.ds.delete` function to delete datastores or datastore content.\n\n9.1. Run the following script to delete datastore content:",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:11+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<h2>Task 9: Delete Datastore Content</h2>\n<p>This task shows how to use the <code>oml.ds.delete</code> function to delete datastores or datastore content.</p>\n<p>9.1. Run the following script to delete datastore content:</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1920604166",
      "id": "20220720-080131_410115625",
      "dateCreated": "2021-03-20T08:03:12+0000",
      "dateStarted": "2022-07-20T08:24:12+0000",
      "dateFinished": "2022-07-20T08:24:12+0000",
      "status": "FINISHED",
      "$$hashKey": "object:78"
    },
    {
      "text": "%python\n\noml.ds.delete(name=\"ds_pydata\", objs=[\"IRIS\", \"oml_boston\"])\n\noml.ds.delete(name=\"ds_pydata\")\n\noml.ds.delete(name=\"_pymodels\", regex_match=True)\n\nz.show(oml.ds.dir())",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:12+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 204,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "datastore_name": "string",
                      "object_count": "string",
                      "size": "string",
                      "date": "string",
                      "description": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "datastore_name\tobject_count\tsize\tdate\tdescription\nPredictPurchaseModel\t1\t673\t2022-03-19 15:30:36\tNone\nauc_result_ftr\t1\t21\t2021-07-02 19:10:24\tNone\nautoml results\t3\t908\t2022-05-02 19:58:02\tNone\nds-1\t3\t1812\t2022-05-05 21:20:18\tNone\nds1\t1\t1296\t2022-05-26 18:02:47\tNone\nds2\t1\t1296\t2022-05-26 18:03:37\tNone\nds3\t1\t1296\t2022-05-26 17:14:43\tNone\nds4\t1\t1296\t2022-05-26 17:14:52\tNone\nds_iris_data\t1\t699\t2022-07-20 08:23:53\tiris dataset\nds_rf_species\t1\t164925\t2021-06-28 22:39:44\tRandom Forest model predicting Species from IRIS\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1691134820",
      "id": "20220720-080131_1059438181",
      "dateCreated": "2021-03-20T08:06:42+0000",
      "dateStarted": "2022-07-20T08:24:12+0000",
      "dateFinished": "2022-07-20T08:24:14+0000",
      "status": "FINISHED",
      "$$hashKey": "object:79"
    },
    {
      "text": "%md\n## Task 10: Use the Python Script Repository\nIn tasks 10 through 15, you  work with Python Script Repository.\n\nOML4Py stores named user-defined functions called scripts in the script repository.  You can make scripts either private or global. A private script is available only to the owner. A global script is available to any user. For private scripts, the owner of the script may grant the read privilege to other users or revoke that privilege.\n\n* `oml.script.create` - Creates a script, which contains a single Python function definition, in the script repository.\n* `oml.script.dir` - Lists the scripts present in the script repository.\n* `oml.script.drop` - Drops a script from the script repository.\n* `oml.script.load` - Loads a script from the script repository into a Python session.\n* `oml.grant` - Grants read privilege permission to another user to a datastore or script owned by the current user.\n* `oml.revoke` - Revokes the read privilege permission that was granted to another user to a datastore or script owned by the current user.\n\nTo illustrate using the Python Script Repository, you will define a function `build_lm1` that fits a regression model. Using this function, you then create a script named `MyLM_function`.\n\n10.1. To store a user-defined function in the script repository, it must be presented as a named string. Run the following script to define the function as a string, `build_lm_str`. **Note** the use of triple quotes to enable formatting.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:14+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<h2>Task 10: Use the Python Script Repository</h2>\n<p>In tasks 10 through 15, you  work with Python Script Repository.</p>\n<p>OML4Py stores named user-defined functions called scripts in the script repository.  You can make scripts either private or global. A private script is available only to the owner. A global script is available to any user. For private scripts, the owner of the script may grant the read privilege to other users or revoke that privilege.</p>\n<ul>\n<li><code>oml.script.create</code> - Creates a script, which contains a single Python function definition, in the script repository.</li>\n<li><code>oml.script.dir</code> - Lists the scripts present in the script repository.</li>\n<li><code>oml.script.drop</code> - Drops a script from the script repository.</li>\n<li><code>oml.script.load</code> - Loads a script from the script repository into a Python session.</li>\n<li><code>oml.grant</code> - Grants read privilege permission to another user to a datastore or script owned by the current user.</li>\n<li><code>oml.revoke</code> - Revokes the read privilege permission that was granted to another user to a datastore or script owned by the current user.</li>\n</ul>\n<p>To illustrate using the Python Script Repository, you will define a function <code>build_lm1</code> that fits a regression model. Using this function, you then create a script named <code>MyLM_function</code>.</p>\n<p>10.1. To store a user-defined function in the script repository, it must be presented as a named string. Run the following script to define the function as a string, <code>build_lm_str</code>. <strong>Note</strong> the use of triple quotes to enable formatting.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1770050815",
      "id": "20220720-080131_1478222207",
      "dateCreated": "2021-09-21T19:05:22+0000",
      "dateStarted": "2022-07-20T08:24:14+0000",
      "dateFinished": "2022-07-20T08:24:14+0000",
      "status": "FINISHED",
      "$$hashKey": "object:80"
    },
    {
      "text": "%python\n\nbuild_lm_str = \"\"\"def build_lm_str(dat):\n    from sklearn import linear_model\n    regr = linear_model.LinearRegression()\n    import pandas as pd\n    dat = pd.get_dummies(dat, drop_first=True)\n    X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]\n    y = dat[[\"SEPAL_LENGTH\"]]\n    regr.fit(X, y)\n    return regr\"\"\"",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:14+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-66978453",
      "id": "20220720-080131_1094220039",
      "dateCreated": "2021-09-21T19:10:58+0000",
      "dateStarted": "2022-07-20T08:24:15+0000",
      "dateFinished": "2022-07-20T08:24:15+0000",
      "status": "FINISHED",
      "$$hashKey": "object:81"
    },
    {
      "text": "%md\n---\n10.2. Run the following script to view the string that you just created:",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:15+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>10.2. Run the following script to view the string that you just created:</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1716370418",
      "id": "20220720-080131_1462663071",
      "dateCreated": "2021-09-21T19:11:18+0000",
      "dateStarted": "2022-07-20T08:24:15+0000",
      "dateFinished": "2022-07-20T08:24:15+0000",
      "status": "FINISHED",
      "$$hashKey": "object:82"
    },
    {
      "text": "%python\n\nprint(build_lm_str)",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:15+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "def build_lm_str(dat):\n    from sklearn import linear_model\n    regr = linear_model.LinearRegression()\n    import pandas as pd\n    dat = pd.get_dummies(dat, drop_first=True)\n    X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]\n    y = dat[[\"SEPAL_LENGTH\"]]\n    regr.fit(X, y)\n    return regr\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1693199379",
      "id": "20220720-080131_1172979081",
      "dateCreated": "2021-09-21T19:12:45+0000",
      "dateStarted": "2022-07-20T08:24:15+0000",
      "dateFinished": "2022-07-20T08:24:15+0000",
      "status": "FINISHED",
      "$$hashKey": "object:83"
    },
    {
      "text": "%md\n## Task 11: Create Scripts in Repository\nIn this task you will use the function `oml.script.create` to create a script `MyLM_function`.\n\n11.1. Run the `oml.script.drop` script first to check if a script by the name `MyLM_function` exists, and drop it if it exists. Then use the `oml.script.create` script to create the script `MyLM_function`. Note that we have the `overwrite` argument set to `True` in case the function already exists.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:16+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<h2>Task 11: Create Scripts in Repository</h2>\n<p>In this task you will use the function <code>oml.script.create</code> to create a script <code>MyLM_function</code>.</p>\n<p>11.1. Run the <code>oml.script.drop</code> script first to check if a script by the name <code>MyLM_function</code> exists, and drop it if it exists. Then use the <code>oml.script.create</code> script to create the script <code>MyLM_function</code>. Note that we have the <code>overwrite</code> argument set to <code>True</code> in case the function already exists.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1062914779",
      "id": "20220720-080131_1123892306",
      "dateCreated": "2021-09-21T19:13:10+0000",
      "dateStarted": "2022-07-20T08:24:16+0000",
      "dateFinished": "2022-07-20T08:24:16+0000",
      "status": "FINISHED",
      "$$hashKey": "object:84"
    },
    {
      "text": "%python\n    \ntry:\n    oml.script.drop(\"MyLM_function\")\nexcept:\n    pass\n\noml.script.create(\"MyLM_function\", func=build_lm_str, overwrite=True)",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:16+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1307927571",
      "id": "20220720-080131_1074758987",
      "dateCreated": "2021-09-21T19:28:18+0000",
      "dateStarted": "2022-07-20T08:24:16+0000",
      "dateFinished": "2022-07-20T08:24:16+0000",
      "status": "FINISHED",
      "$$hashKey": "object:85"
    },
    {
      "text": "%md\n---\n11.2. Run the `oml.script.dir` script to list the scripts to which the read privilege has been granted, and where `sctype` is set to `grant`.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:16+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>11.2. Run the <code>oml.script.dir</code> script to list the scripts to which the read privilege has been granted, and where <code>sctype</code> is set to <code>grant</code>.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1779543816",
      "id": "20220720-080131_1689882714",
      "dateCreated": "2021-09-21T19:28:56+0000",
      "dateStarted": "2022-07-20T08:24:17+0000",
      "dateFinished": "2022-07-20T08:24:17+0000",
      "status": "FINISHED",
      "$$hashKey": "object:86"
    },
    {
      "text": "%python\n\noml.script.dir(sctype=\"grant\")",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:17+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Empty DataFrame\nColumns: [name, grantee]\nIndex: []\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_127993759",
      "id": "20220720-080131_1890316081",
      "dateCreated": "2021-09-21T19:29:33+0000",
      "dateStarted": "2022-07-20T08:24:17+0000",
      "dateFinished": "2022-07-20T08:24:17+0000",
      "status": "FINISHED",
      "$$hashKey": "object:87"
    },
    {
      "text": "%md\n---\n11.3. Run the following script to load the named function `MyLM_function` into the Python engine for use as a typical Python function using  `oml.script.load`.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:17+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>11.3. Run the following script to load the named function <code>MyLM_function</code> into the Python engine for use as a typical Python function using  <code>oml.script.load</code>.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_604121807",
      "id": "20220720-080131_1528779482",
      "dateCreated": "2021-09-21T19:30:33+0000",
      "dateStarted": "2022-07-20T08:24:17+0000",
      "dateFinished": "2022-07-20T08:24:17+0000",
      "status": "FINISHED",
      "$$hashKey": "object:88"
    },
    {
      "text": "%python\nimport inspect\n\nMyLM_function = oml.script.load(\"MyLM_function\")\nprint(\"Type\", type(MyLM_function))\nMyLM_function.get_source()\nprint(str(MyLM_function))\nprint(MyLM_function.get_source().read())",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:18+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Type <class 'oml.script.script.Callable'>\n<oml.script.script.Callable object at 0x7f9b37241ca0>\ndef build_lm_str(dat):\n    from sklearn import linear_model\n    regr = linear_model.LinearRegression()\n    import pandas as pd\n    dat = pd.get_dummies(dat, drop_first=True)\n    X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]\n    y = dat[[\"SEPAL_LENGTH\"]]\n    regr.fit(X, y)\n    return regr\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1219548384",
      "id": "20220720-080131_1728491823",
      "dateCreated": "2021-09-21T19:31:18+0000",
      "dateStarted": "2022-07-20T08:24:18+0000",
      "dateFinished": "2022-07-20T08:24:18+0000",
      "status": "FINISHED",
      "$$hashKey": "object:89"
    },
    {
      "text": "%md\n---\n11.4. Extract the function text string from the function object and use this to save in the script repository using `oml.script_create`.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:18+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/osql",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>11.4. Extract the function text string from the function object and use this to save in the script repository using <code>oml.script_create</code>.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-2112403709",
      "id": "20220720-080131_1335219925",
      "dateCreated": "2021-09-21T19:31:41+0000",
      "dateStarted": "2022-07-20T08:24:18+0000",
      "dateFinished": "2022-07-20T08:24:18+0000",
      "status": "FINISHED",
      "$$hashKey": "object:90"
    },
    {
      "text": "%python\n\nloaded_str = MyLM_function.get_source().read()\ntype(loaded_str)",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:18+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "<class 'str'>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-2105674388",
      "id": "20220720-080131_1617455729",
      "dateCreated": "2021-09-21T19:32:12+0000",
      "dateStarted": "2022-07-20T08:24:19+0000",
      "dateFinished": "2022-07-20T08:24:19+0000",
      "status": "FINISHED",
      "$$hashKey": "object:91"
    },
    {
      "text": "%md\n---\n11.5. Run the script `oml.script.create` to create a test function `MyTEST_function`:",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:19+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>11.5. Run the script <code>oml.script.create</code> to create a test function <code>MyTEST_function</code>:</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_955129682",
      "id": "20220720-080131_1103129892",
      "dateCreated": "2021-09-21T19:32:33+0000",
      "dateStarted": "2022-07-20T08:24:19+0000",
      "dateFinished": "2022-07-20T08:24:19+0000",
      "status": "FINISHED",
      "$$hashKey": "object:92"
    },
    {
      "text": "%python\n\noml.script.create(\"MyTEST_function\", func=loaded_str, overwrite=True)",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:19+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-916839816",
      "id": "20220720-080131_329065466",
      "dateCreated": "2021-09-21T19:32:54+0000",
      "dateStarted": "2022-07-20T08:24:19+0000",
      "dateFinished": "2022-07-20T08:24:19+0000",
      "status": "FINISHED",
      "$$hashKey": "object:93"
    },
    {
      "text": "%md\n---\n11.6. Use `oml.script.dir` to list all the available scripts.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:19+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>11.6. Use <code>oml.script.dir</code> to list all the available scripts.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1642589292",
      "id": "20220720-080131_1918856226",
      "dateCreated": "2021-09-21T19:33:14+0000",
      "dateStarted": "2022-07-20T08:24:20+0000",
      "dateFinished": "2022-07-20T08:24:20+0000",
      "status": "FINISHED",
      "$$hashKey": "object:94"
    },
    {
      "text": "%python\n\nz.show(oml.script.dir(sctype=\"all\"))",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:20+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "owner": "string",
                      "name": "string",
                      "script": "string",
                      "description": "string",
                      "date": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "owner\tname\tscript\tdescription\tdate\nOMLUSER\tMyLM_function\tdef build_lm_str(dat):     from sklearn import linear_model     regr = linear_model.LinearRegression()     import pandas as pd     dat = pd.get_dummies(dat, drop_first=True)     X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]     y = dat[[\"SEPAL_LENGTH\"]]     regr.fit(X, y)     return regr\tNone\t2022-07-20 08:24:16\nOMLUSER\tMyTEST_function\tdef build_lm_str(dat):     from sklearn import linear_model     regr = linear_model.LinearRegression()     import pandas as pd     dat = pd.get_dummies(dat, drop_first=True)     X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]     y = dat[[\"SEPAL_LENGTH\"]]     regr.fit(X, y)     return regr\tNone\t2022-07-20 08:24:19\nOMLUSER\tRandomRedDots\tdef RandomRedDots (num_dots_1=100, num_dots_2=10):     import numpy as np     import pandas as pd     import matplotlib.pyplot as plt        d = {'id': range(1,10), 'val': [x/100 for x in range(1,10)]}     df = pd.DataFrame(data=d)     fig = plt.figure(1)     ax = fig.add_subplot(111)     ax.scatter(range(0,int(num_dots_1)), np.random.rand(int(num_dots_1)),c='r')     fig.suptitle(\"Random Red Dots\")      fig2 = plt.figure(2)     ax2 = fig2.add_subplot(111)     ax2.scatter(range(0,int(num_dots_2)), np.random.rand(int(num_dots_2)),c='r')     fig2.suptitle(\"Random Red Dots\")     return df\tNone\t2022-03-22 19:44:23\nOMLUSER\tbuild_lm\tdef build_lm(dat, dsname):             from sklearn import linear_model             import oml             regr = linear_model.LinearRegression()             import pandas as pd             X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\"]]             y = dat[[\"SEPAL_LENGTH\"]]             res = regr.fit(X, y)             res_coef = res.coef_             res.df = pd.DataFrame(res_coef, columns = ['Coef_SEPAL_WIDTH','Coef_PETAL_LENGTH','Coef_PETAL_WIDTH'])             oml.ds.save(objs={'regr':regr}, name=dsname, overwrite=True)             return res.df\tNone\t2022-05-26 18:02:35\nOMLUSER\tbuild_lm_1\tdef build_lm_1(dat):     import oml     from sklearn import linear_model     import matplotlib.pyplot as plt      lm = linear_model.LinearRegression()     X = dat[[\"PETAL_WIDTH\"]]     y = dat[[\"PETAL_LENGTH\"]]     mod = lm.fit(X, y)          pred = mod.predict(dat[[\"PETAL_WIDTH\"]])     plt.scatter(dat.loc[:,\"PETAL_WIDTH\"], dat.loc[:,\"PETAL_LENGTH\"])     plt.plot(dat[[\"PETAL_WIDTH\"]], pred, color='blue', linewidth=3)     plt.grid(True)     plt.title('Prediction of Petal Length')          plt.xlabel('Petal Width')     plt.ylabel('Petal Length')     plt.show()     return mod\tNone\t2022-05-05 22:19:55\nOMLUSER\tbuild_lm_rest\tdef build_rest(dat):             from sklearn import linear_model             import oml             regr = linear_model.LinearRegression()             import pandas as pd             dat = pd.get_dummies(dat, drop_first=True)             X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]             y = dat[[\"SEPAL_LENGTH\"]]             regr.fit(X, y)             data = {}             data[\"init_params\"] = regr.get_params()             data[\"model_params\"] = mp = {}             for p in (\"coef_\", \"intercept_\", \"_residues\", \"singular_\"):                 mp[p] = getattr(regr, p).tolist()             return data\tNone\t2022-03-10 00:31:56\nOMLUSER\tdensity_plt\tdef density_plt(dat):     dat.plot(kind='density')     return(True)\tNone\t2022-05-26 18:05:32\nOMLUSER\tgroup_count\tdef group_count(dat):   import oml   import pandas as pd   return pd.DataFrame([(dat[\"SPECIES\"][0], dat.shape[0])], columns = [\"SPECIES\", \"COUNT\"])\tNone\t2022-05-26 18:00:06\nOMLUSER\tmyLinearRegressionModel\tdef fit_model(dat, modelName, datastoreName):        import oml        from sklearn import linear_model        regr = linear_model.LinearRegression()        regr.fit(dat.loc[:, [\"Sepal_Length\",                              \"Sepal_Width\",                              \"Petal_Length\"]],                 dat.loc[:,[\"Petal_Width\"]])        oml.ds.save(objs={modelName:regr},                     name=datastoreName,                    overwrite=True)        return str(regr)\tNone\t2022-02-09 18:11:59\nOMLUSER\tscore_mod\tdef score_mod(dat, dsname):             import oml             import pandas as pd             import matplotlib.pyplot as plt             obj_dict = oml.ds.load(name=dsname, to_globals=False)               regr = obj_dict[\"regr\"]                                                   pred = regr.predict(dat[['SEPAL_WIDTH','PETAL_LENGTH','PETAL_WIDTH']])                return pd.concat([dat[['SPECIES', 'SEPAL_LENGTH']], pd.DataFrame(pred, columns=['Pred_SEPAL_LENGTH'])], axis=1)\tNone\t2022-05-26 18:04:26\nOMLUSER\tsk_svc_fit\tdef fit(data):      from sklearn.svm import LinearSVC     x = data.drop('SPECIES', axis = 1).values     y = data['SPECIES']     mod =  LinearSVC().fit(x, y)     return mod\tNone\t2022-05-05 21:20:29\nOMLUSER\ttest_noinp_rest\tdef test_noinp():  import oml  from oml.automl import AlgorithmSelection  df = oml.sync(schema=\"OMLUSER02\", table = \"NARROW\")  train, test = df.split(ratio=(0.9, 0.1), seed = 1234)  X, y = train[:,0:-1], train[:,-1]  X_test, y_test = test[:,0:-1], test[:,-1]  asel = AlgorithmSelection(mining_function=\"classification\",score_metric=\"accuracy\", parallel=4)  scores = [ \"{0}:{1:.3f}\".format(m, s) for m, s in asel.select(X, y, k=None) ]  return(\"Algorithm selection prediction scores:{}\".format(scores))\tNone\t2022-03-08 00:32:47\nPYQSYS\tGLBLM\tdef build_lm2(dat):   from sklearn import linear_model   regr = linear_model.LinearRegression()   X = dat[[\"Petal_Width\"]]   y = dat[[\"Petal_Length\"]]   regr.fit(X, y)   return regr\tNone\t2022-02-11 06:06:44\nPYQSYS\tRandomRedDots\tdef RandomRedDots (num_dots_1 = 100, num_dots_2 = 10):     import numpy as np     import pandas as pd     import matplotlib.pyplot as plt             d = {'id': range(1,10), 'val': [x/100 for x in range(1,10)]}     df = pd.DataFrame(data=d)     plt.scatter(range(0,num_dots_1), np.random.rand(100),c='r')     plt.title(\"Random Red Dots\")     plt.show()     plt.scatter(range(0,num_dots_2), np.random.rand(10),c='r')     plt.title(\"Random Red Dots\")     plt.show()     return df\tNone\t2022-05-04 17:56:17\nPYQSYS\tRandomRedDots2\tdef RandomRedDots2 (num_dots_1 = 100, num_dots_2 = 10):     import numpy as np     import pandas as pd     import matplotlib.pyplot as plt        d = {'id': range(1,10), 'val': [x/100 for x in range(1,10)]}     df = pd.DataFrame(data=d)     fig = plt.figure(1)     ax = fig.add_subplot(111)     ax.scatter(range(0,num_dots_1), np.random.rand(num_dots_1),c='r')     fig.suptitle(\"Random Red Dots\")      fig2 = plt.figure(2)     ax2 = fig2.add_subplot(111)     ax2.scatter(range(0,num_dots_2), np.random.rand(num_dots_2),c='r')     fig2.suptitle(\"Random Red Dots\")     return df\tNone\t2022-05-04 17:56:22\nPYQSYS\tRandomRedDots3\tdef RandomRedDots3 (num_dots_1 = 100, num_dots_2 = 10):     import numpy as np     import pandas as pd     import matplotlib.pyplot as plt      d = {'id': range(1,10), 'val': [x/100 for x in range(1,10)]}     df = pd.DataFrame(data=d)      plt.subplot(2,1, 1)     plt.scatter(range(0,num_dots_1), np.random.rand(num_dots_1),c='r')     plt.title(\"Random Red Dots\")      plt.subplot(2, 1, 2)     plt.scatter(range(0,num_dots_2), np.random.rand(num_dots_2),c='r')     plt.title(\"Random Red Dots\")     return df\tNone\t2022-05-05 22:36:09\nPYQSYS\tTEST\tdef test2():     return print(\"Block 2 done. Starting block 3...\", end=\"\")\tNone\t2021-08-13 17:37:02\nPYQSYS\tTEST4\tdef test4():     return print(\"Block 2 done.\\nStarting block 3...\", end=\"\")\tNone\t2021-08-13 17:42:49\nPYQSYS\tTEST_FUN\tdef test_fun(dat):   import seaborn as sns   import oml   data = oml.sync(dat)   may_flights = FLIGHTS.query(\"month == 'May'\")   flights_wide = FLIGHTS.pivot(\"year\", \"month\", \"passengers\")   sns.lineplot(data=flights_wide)\tNone\t2021-08-13 22:38:54\nPYQSYS\talg_select\tdef alg_select(table, target, parallel):  import oml  from oml import automl  train_data = oml.sync(table=table)  X_train, y_train = train_data.drop(target), train_data[target]  asel = automl.AlgorithmSelection(mining_function='classification', score_metric='accuracy', parallel=parallel)  algo_ranking = asel.select(X_train, y_train, k=1)   best_algo = algo_ranking[0][0]  message = print(\"OML4Py AutoML Algorithm Selection: selected \"+best_algo+\" algorithm\")  return message\tAlgorithm Selection using OML4Py AutoML(string inputs for table and target, numeric input for parallel)\t2021-08-04 00:06:31\nPYQSYS\talgo_select\tdef algo_select(input, mining_function, score_metric, parallel):   import oml   from oml.automl import AlgorithmSelection   df = oml.push(input)   train, test = df.split(ratio=(0.9, 0.1), seed = 1234)   X, y = train[:,0:-1], train[:,-1]   X_test, y_test = test[:,0:-1], test[:,-1]   asel = AlgorithmSelection(mining_function=mining_function, score_metric=score_metric, parallel=parallel)   scores = [ \"{0}:{1:.3f}\".format(m, s) for m, s in asel.select(X, y, k=None) ]   return(\"Algorithm selection prediction scores: {}\".format(scores))\tAutoML algorithm selection with string inputs for data, mining_function, score_metric, and a numeric input for parallel\t2021-08-04 19:57:55\nPYQSYS\tbuild_automl\tdef build_automl(input_df):  import oml  from oml import automl  AUTOML_TABLE=input_df['AUTOML_TABLE'][0]  AUTOML_NAME=input_df['AUTOML_NAME'][0]  AUTOML_TARGET=input_df['AUTOML_TARGET'][0]  AUTOML_PARALLEL=int(input_df['AUTOML_PARALLEL'])  train_data = oml.sync(table=AUTOML_TABLE)  X_train, y_train = train_data.drop(AUTOML_TARGET) , train_data[AUTOML_TARGET]  try:   oml.drop(model=AUTOML_NAME)  except:   pass  asel = automl.AlgorithmSelection(mining_function='classification', score_metric='accuracy', parallel=AUTOML_PARALLEL)  algo_ranking = asel.select(X_train, y_train, k=1)   best_algo = algo_ranking[0][0]  print(\"AutoML Algorithm Selection: selected \"+best_algo+\" algorithm in \"+str(time.strftime(\"%Hh%Mm%Ss\", time.gmtime((time.time() - start)))))  fs_set = automl.FeatureSelection(mining_function = 'classification', score_metric = 'balanced_accuracy', parallel=AUTOML_PARALLEL)  selected_set = fs_set.reduce(best_algo, X_train, y_train, cv='auto', adaptive_sampling=True)  X_train_reduced = X_train[:,selected_set]  print(\"AutoML Feature Selection: selected \"+str(len(X_train_reduced.columns))+\" columns from the original \"+str(len(X_train.columns))+\" in \"+str(time.strftime(\"%Hh%Mm%Ss\", time.gmtime((time.time() - start)))))  atune = automl.ModelTuning(mining_function = 'classification', parallel=AUTOML_PARALLEL)  results_at = atune.tune(best_algo, X_train_reduced, y_train)  final_model = results_at['best_model']  final_model.model_name = AUTOML_NAME  message = print(\"AutoML Tuning successfull for algorithm \"+str(best_algo)+\" using \"+str(len(X_train_reduced.columns))+\" columns into \"+AUTOML_NAME+\" in \"+str(time.strftime(\"%Hh%Mm%Ss\", time.gmtime((time.time() - start)))))  return message\tBuild AutoML model (String inputs for table, name, target and parallel)\t2021-08-03 23:39:03\nPYQSYS\tcompute_random_mean\tdef compute_random_mean(index):     import numpy as np     import scipy     from statistics import mean      np.random.seed(index)     res = np.random.random((100,1))*10     return mean(res[1])\tNone\t2021-11-30 22:57:30\nPYQSYS\tgroup_count\tdef group_count(dat):   import oml   import pandas as pd   return pd.DataFrame([(dat[\"Species\"][0], dat[\"Sepal_Length\"][0], dat.shape[0])],                       columns = [\"Species\", \"Sepal_Length\", \"Count\"])\tNone\t2022-04-20 17:35:40\nPYQSYS\tmy_pred\tdef my_pred(dat):     import pandas as pd     import oml     obj_dict = oml.ds.load(name=\"ds_regr\", to_globals=False)       regr = obj_dict[\"regr\"]     pred = regr.predict(dat[['Sepal_Length',                               'Sepal_Width',                              'Petal_Length']])     return pd.concat([dat[['Species', 'Petal_Width']],                       pd.DataFrame(pred,                                    columns=['Pred_Petal_Width'])],                                    axis=1)\tNone\t2021-04-30 01:02:04\nPYQSYS\tmy_predict\tdef my_predict(dat):     import pandas as pd     import oml     obj_dict = oml.ds.load(name=\"ds_regr\", to_globals=False)       regr = obj_dict[\"regr\"]     pred = regr.predict(dat[['Sepal_Length',                               'Sepal_Width',                              'Petal_Length']])     return pd.concat([dat[['Species', 'Petal_Width']],                       pd.DataFrame(pred,                                    columns=['Pred_Petal_Width'])],                                    axis=1)\tNone\t2021-11-30 22:58:03\nPYQSYS\tpred_lm\tdef pred_lm(dat):     from sklearn import linear_model     import oml          lm = linear_model.LinearRegression()     X = dat[[\"Petal_Width\"]]     y = dat[[\"Petal_Length\"]]     mod = lm.fit(X, y)          pred = mod.predict(dat[[\"Petal_Width\"]])\tNone\t2021-11-30 22:58:15\nPYQSYS\tpred_oml_rf\tdef pred_oml_rf(data_string):  import oml  tab_name = data_string.values[0][0]  dat = oml.sync(table=str(tab_name))  saved_omlrf = oml.rf(model_name='RF_PRED_SPECIES')  output = saved_omlrf.predict(dat.drop('SPECIES'),                                supplemental_cols=dat)  return output\tPred Species OML RF (String table name input)\t2021-06-29 14:46:17\nPYQSYS\tpred_rf_species\tdef pred_rf_species(dat):  import pandas as pd  import oml  obj_dict = oml.ds.load(name=\"ds_rf_species\", to_globals=False)  rf_species = obj_dict[\"rf_species\"]  pred = rf_species.predict(dat[['PETAL_WIDTH',   'SEPAL_WIDTH',  'PETAL_LENGTH',  'PETAL_WIDTH']])  return pd.concat([dat[['PETAL_LENGTH','PETAL_WIDTH',  'SEPAL_LENGTH','SEPAL_WIDTH',  'SPECIES']],   pd.DataFrame(pred,columns=['PREDICTED_SPECIES'])],  axis=1)\tPred Species SKLearn RF (Table input)\t2021-06-29 14:45:41\nPYQSYS\tpred_rf_species_2\tdef pred_rf_species_2(data_string):  import pandas as pd  import oml  obj_dict = oml.ds.load(name=\"ds_rf_species\", to_globals=False)  rf_species = obj_dict[\"rf_species\"]  tab_name = data_string.values[0][0]  dat = oml.sync(table=str(tab_name)).pull()  pred = rf_species.predict(dat[['PETAL_WIDTH',   'SEPAL_WIDTH',  'PETAL_LENGTH',  'PETAL_WIDTH']])  return pd.concat([dat[['PETAL_LENGTH','PETAL_WIDTH',  'SEPAL_LENGTH','SEPAL_WIDTH',  'SPECIES']],   pd.DataFrame(pred,columns=['PREDICTED_SPECIES'])],  axis=1)\tPred Species SKLearn RF (Table name input)\t2021-06-28 23:03:17\nPYQSYS\tpred_rf_species_3\tdef pred_rf_species_3(data_string):  import pandas as pd  import oml  obj_dict = oml.ds.load(name=\"ds_rf_species\", to_globals=False)  rf_species = obj_dict[\"rf_species\"]  print(\"What was received: \")  print(type(data_string))  print(data_string)  tab_name = data_string.values[0][0]  print(\"Table name extracted: \")  print(type(tab_name))  print(tab_name)  try:     dat = oml.sync(table=str(tab_name)).pull()    print ('Loaded the table')    print(dat.head)  except:    print('Unable to load the table')  pred = rf_species.predict(dat[['PETAL_WIDTH',   'SEPAL_WIDTH',  'PETAL_LENGTH',  'PETAL_WIDTH']])  return pd.DataFrame(pred)\tPred Species SKLearn RF (Table name input)\t2021-06-28 15:18:29\nPYQSYS\tthread_process\tdef thread_process(key, value ):             import os                          print('pid :',os.getpid() ,',')             #print ('for: ' ,key)             return [key, value , os.getpid()]\tNone\t2021-12-16 21:49:42\nPYQSYS\ttrain_AML\t def train_aml(dat):    import pandas as pd   import oml  from oml import automl  import numpy as np    #try:  #oml.drop('IRIS4')  #except:  #pass    #print(\"11\")  #IRIS = oml.create(dat, table = \"IRIS4\")  df = oml.push(dat)    #X_reg,y_reg = IRIS.drop('SEPAL_LENGTH'), IRIS['SEPAL_LENGTH']  X_reg,y_reg = df.drop('SEPAL_LENGTH'), df['SEPAL_LENGTH']  #print(\"22\")  #est_reg = automl.AlgorithmSelection(mining_function='regression', score_metric='r2', parallel=2)  est_reg = automl.AlgorithmSelection(mining_function='regression', score_metric='r2', parallel=1)  est_alg_ranking_reg = est_reg.select(X_reg, y_reg ,k=4)    #print(\"33\")  print(\"Ranked algorithms:\", est_alg_ranking_reg)    selected_alg_reg = next(iter(dict(est_alg_ranking_reg).keys()))  #print(\"Best algorithm: \", selected_alg_reg)      #fs_reg = automl.FeatureSelection(mining_function = 'regression', score_metric = 'r2', parallel=2)  fs_reg = automl.FeatureSelection(mining_function = 'regression', score_metric = 'r2', parallel=1)    selected_features_reg = fs_reg.reduce(selected_alg_reg, X_reg, y_reg)    X_reduced_reg = X_reg[:,selected_features_reg]    #print(\"Selected columns:\",X_reduced_reg.columns)  # print(\"Number of columns:\")  #\"{} reduced to {}\".format(len(X_reg.columns), len(selected_features_reg))        #mt_reg = automl.ModelTuning(mining_function = 'regression', parallel=2)  mt_reg = automl.ModelTuning(mining_function = 'regression', parallel=1)  results_reg = mt_reg.tune(selected_alg_reg, X_reduced_reg, y_reg)  tuned_model_reg = results_reg['best_model']      oml.ds.save(objs={'tuned_model_reg':tuned_model_reg}, name=\"trained_aml_regr\", grantable=True, overwrite=True)   #oml.ds.dir()  return_json = {\"status\" : \"Model Built\"}  print(return_json)  return return_json\tNone\t2022-03-29 22:03:10\nPYQSYS\ttrain_AML2\t def train_aml2(dat):    import pandas as pd   import oml  from oml import automl  import numpy as np    df = oml.sync(query = \"select * from IRIS\")  X_reg,y_reg = df.drop('SEPAL_LENGTH'), df['SEPAL_LENGTH']   est_reg = automl.AlgorithmSelection(mining_function='regression', score_metric='r2', parallel=1)  est_alg_ranking_reg = est_reg.select(X_reg, y_reg ,k=4)    print(\"Ranked algorithms:\", est_alg_ranking_reg)    selected_alg_reg = next(iter(dict(est_alg_ranking_reg).keys()))   fs_reg = automl.FeatureSelection(mining_function = 'regression', score_metric = 'r2', parallel=1)    selected_features_reg = fs_reg.reduce(selected_alg_reg, X_reg, y_reg)  X_reduced_reg = X_reg[:,selected_features_reg]   mt_reg = automl.ModelTuning(mining_function = 'regression', parallel=1)  results_reg = mt_reg.tune(selected_alg_reg, X_reduced_reg, y_reg)  tuned_model_reg2 = results_reg['best_model']      oml.ds.save(objs={'tuned_model_reg2':tuned_model_reg2}, name=\"trained_aml_regr2\", grantable=True, overwrite=True)   return_json = {\"status\" : \"Model Built\"}  print(return_json)  return return_json\tNone\t2022-03-29 22:10:04\nPYQSYS\ttrain_automl_embed\tdef train_automl(dat):  import pandas as pd   import oml  from oml import automl  import numpy as np    df = oml.sync(query = \"select * from IRIS\")  X,y = df.drop('SEPAL_LENGTH'), df['SEPAL_LENGTH']   est = automl.AlgorithmSelection(mining_function='regression', score_metric='r2', parallel=True)  est_alg_rank = est.select(X, y, k=4)    print(\"Ranked algorithms:\", est_alg_rank)    selected_alg = next(iter(dict(est_alg_rank).keys()))   fs = automl.FeatureSelection(mining_function='regression', score_metric='r2', parallel=True)    selected_features = fs.reduce(selected_alg, X, y)  X_reduced = X[:,selected_features]   mt = automl.ModelTuning(mining_function='regression', parallel=True)  results = mt.tune(selected_alg, X_reduced, y)    tuned_model = results['best_model']  print(\"Best Model:\", tuned_model)    oml.ds.save(objs={'tuned_model_embed':tuned_model}, name=\"tuned model embed\", grantable=True, overwrite=True)\tNone\t2022-03-30 04:05:06\nPYQSYS\ttrain_automl_string\tdef train_automl_string(input, target, mining_function, score_metric, datastoreName):   # Import libraries  import pandas as pd   import oml  from oml import automl  import numpy as np    # Sync data and define target  df = oml.sync(table=input)  X,y = df.drop(f\"{target}\"), df[f\"{target}\"]    # Algorithm Selection  from oml.automl import AlgorithmSelection  asel = AlgorithmSelection(mining_function=mining_function, score_metric=score_metric)  asel_res = asel.select(X, y, k=None)    # Best algorithm  best_alg = next(iter(dict(asel_res).keys()))  score_asel = [ \"{0}:{1:.3f}\".format(m, s) for m, s in asel.select(X, y, k=None) ]  #return {\"Algorithm selection prediction scores: {}\".format(score_asel)}    # Feature Selection  fs = automl.FeatureSelection(mining_function=mining_function, score_metric=score_metric)  fsel = fs.reduce(best_alg, X, y)  X_reduced = X[:,fsel]  # return {\"Selected columns: {}\".format(X_reduced.columns)}    # Model Tuning  mt = automl.ModelTuning(mining_function=mining_function)  results = mt.tune(best_alg, X_reduced, y)  tuned_model = results['best_model']   # next step: add flag to allow user to choice for persisting results   # Save algorithm selection prediction scores, selected features, and tuned model to the datastore  oml.ds.save(objs={'algorithm selection prediction scores':score_asel,'selected features':X_reduced.columns,'tuned model':tuned_model},     name=datastoreName, grantable=True, overwrite=True)    return(str(\"Algorithm selection prediction scores, selected features, and tuned model saved to datastore: {}\".format(datastoreName)))\tNone\t2022-05-02 19:54:50\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_2073205904",
      "id": "20220720-080131_1363655674",
      "dateCreated": "2021-09-21T19:33:53+0000",
      "dateStarted": "2022-07-20T08:24:20+0000",
      "dateFinished": "2022-07-20T08:24:20+0000",
      "status": "FINISHED",
      "$$hashKey": "object:95"
    },
    {
      "text": "%md\n---\n11.7. Call the `table_apply` on `build_lm_str` and `loaded_str` functions. Note that these strings represent the same function `build_lm_str` that was saved to the script repository after assigning the function to a string object. The `loaded_str` is the string representation of the function extracted using `get_source().read()`.",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:20+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>11.7. Call the <code>table_apply</code> on <code>build_lm_str</code> and <code>loaded_str</code> functions. Note that these strings represent the same function <code>build_lm_str</code> that was saved to the script repository after assigning the function to a string object. The <code>loaded_str</code> is the string representation of the function extracted using <code>get_source().read()</code>.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1782757395",
      "id": "20220720-080131_330061243",
      "dateCreated": "2021-09-21T19:34:29+0000",
      "dateStarted": "2022-07-20T08:24:20+0000",
      "dateFinished": "2022-07-20T08:24:20+0000",
      "status": "FINISHED",
      "$$hashKey": "object:96"
    },
    {
      "text": "%python\n\nmod1 = oml.table_apply(data=IRIS, func = build_lm_str)\nmod1.coef_",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:20+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "array([[ 0.49588894,  0.82924391, -0.31515517, -0.72356196, -1.02349781]])\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-723222975",
      "id": "20220720-080131_1767122631",
      "dateCreated": "2021-09-21T19:34:55+0000",
      "dateStarted": "2022-07-20T08:24:21+0000",
      "dateFinished": "2022-07-20T08:24:21+0000",
      "status": "FINISHED",
      "$$hashKey": "object:97"
    },
    {
      "text": "%md\n---\nRun the same function on `loaded_str`:",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:21+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>Run the same function on <code>loaded_str</code>:</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-2090066005",
      "id": "20220720-080131_1625516467",
      "dateCreated": "2021-09-21T19:42:45+0000",
      "dateStarted": "2022-07-20T08:24:21+0000",
      "dateFinished": "2022-07-20T08:24:21+0000",
      "status": "FINISHED",
      "$$hashKey": "object:98"
    },
    {
      "text": "%python\n\nmod2 = oml.table_apply(data=IRIS, func = loaded_str)\nmod2.coef_",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:21+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "array([[ 0.49588894,  0.82924391, -0.31515517, -0.72356196, -1.02349781]])\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-374907759",
      "id": "20220720-080131_202868286",
      "dateCreated": "2021-09-21T19:43:09+0000",
      "dateStarted": "2022-07-20T08:24:21+0000",
      "dateFinished": "2022-07-20T08:24:22+0000",
      "status": "FINISHED",
      "$$hashKey": "object:99"
    },
    {
      "text": "%md\n## Task 12: Store a function as a global  function\n\nA global function is one that can be accessed by any user.\n\nIn this step, you will define and save a global function `build_lm3`. You will then call that function `build_lm3` to build another model.\n\n12.1. Define and save the function `build_lm3`:",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<h2>Task 12: Store a function as a global  function</h2>\n<p>A global function is one that can be accessed by any user.</p>\n<p>In this step, you will define and save a global function <code>build_lm3</code>. You will then call that function <code>build_lm3</code> to build another model.</p>\n<p>12.1. Define and save the function <code>build_lm3</code>:</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1919794084",
      "id": "20220720-080131_2103909258",
      "dateCreated": "2021-09-21T19:43:35+0000",
      "dateStarted": "2022-07-20T08:24:22+0000",
      "dateFinished": "2022-07-20T08:24:22+0000",
      "status": "FINISHED",
      "$$hashKey": "object:100"
    },
    {
      "text": "%python\n\nbuild_lm3 = \"\"\"def build_lm3(dat):\n    from sklearn import linear_model\n    regr = linear_model.LinearRegression()\n    X = dat[[\"PETAL_WIDTH\"]]\n    y = dat[[\"PETAL_LENGTH\"]]\n    regr.fit(X, y)\n    return regr\"\"\"",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_75352774",
      "id": "20220720-080131_902658303",
      "dateCreated": "2021-09-21T19:44:06+0000",
      "dateStarted": "2022-07-20T08:24:22+0000",
      "dateFinished": "2022-07-20T08:24:22+0000",
      "status": "FINISHED",
      "$$hashKey": "object:101"
    },
    {
      "text": "%md\n---\n12.2. Call the function `build_lm3` to build the model or model `MyGlobalML_function`:",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<hr />\n<p>12.2. Call the function <code>build_lm3</code> to build the model or model <code>MyGlobalML_function</code>:</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_896189382",
      "id": "20220720-080131_1318592772",
      "dateCreated": "2021-09-21T19:44:29+0000",
      "dateStarted": "2022-07-20T08:24:23+0000",
      "dateFinished": "2022-07-20T08:24:23+0000",
      "status": "FINISHED",
      "$$hashKey": "object:102"
    },
    {
      "text": "%python\n\noml.script.create(\"MyGlobalLM_function\", func=build_lm3, is_global=True, overwrite=True)",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:23+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1411555256",
      "id": "20220720-080131_2123262111",
      "dateCreated": "2021-09-21T19:44:53+0000",
      "dateStarted": "2022-07-20T08:24:23+0000",
      "dateFinished": "2022-07-20T08:24:23+0000",
      "status": "FINISHED",
      "$$hashKey": "object:103"
    },
    {
      "text": "%md\n## Task 13: Drop scripts from the Script Repository\nIn this task, you will perform the following:\n\n* Drop one of the private scripts.\n* Drop the global script.\n* List the available scripts again.\n\n**Note:** You can make the script either private or global. A global script is available to any user. A private script is available only to the owner or to users to whom the owner of the script has granted the read privilege.\n\n13.1. Run the following script to drop the private script `MyLM_function2`, drop the global script `MyGlobalML_function`, and then list the available scripts. The script first deletes the contents of datastore `ds_pydata`, and then deletes the datastore itself. It also deletes the datastore `ds_pymodel` using regular expression pattern matching.\n",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:23+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<h2>Task 13: Drop scripts from the Script Repository</h2>\n<p>In this task, you will perform the following:</p>\n<ul>\n<li>Drop one of the private scripts.</li>\n<li>Drop the global script.</li>\n<li>List the available scripts again.</li>\n</ul>\n<p><strong>Note:</strong> You can make the script either private or global. A global script is available to any user. A private script is available only to the owner or to users to whom the owner of the script has granted the read privilege.</p>\n<p>13.1. Run the following script to drop the private script <code>MyLM_function2</code>, drop the global script <code>MyGlobalML_function</code>, and then list the available scripts. The script first deletes the contents of datastore <code>ds_pydata</code>, and then deletes the datastore itself. It also deletes the datastore <code>ds_pymodel</code> using regular expression pattern matching.</p>\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_-1481892078",
      "id": "20220720-080131_1005619087",
      "dateCreated": "2021-09-21T19:45:56+0000",
      "dateStarted": "2022-07-20T08:24:23+0000",
      "dateFinished": "2022-07-20T08:24:23+0000",
      "status": "FINISHED",
      "$$hashKey": "object:104"
    },
    {
      "text": "%python\n\noml.script.drop(\"MyLM_function\")\noml.script.drop(\"MyGlobalLM_function\", is_global=True)\nz.show(oml.script.dir(sctype=\"all\"))",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:23+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {
                    "columns": [
                      {
                        "name": "owner",
                        "visible": true,
                        "width": 150,
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "name",
                        "visible": true,
                        "width": 180,
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "script",
                        "visible": true,
                        "width": 703,
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "description",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "date",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      }
                    ],
                    "scrollFocus": {},
                    "selection": [],
                    "grouping": {
                      "grouping": [],
                      "aggregations": [],
                      "rowExpandedStates": {}
                    },
                    "treeView": {},
                    "pagination": {
                      "paginationCurrentPage": 1,
                      "paginationPageSize": 250
                    }
                  },
                  "tableColumnTypeState": {
                    "names": {
                      "owner": "string",
                      "name": "string",
                      "script": "string",
                      "description": "string",
                      "date": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "owner\tname\tscript\tdescription\tdate\nOMLUSER\tMyTEST_function\tdef build_lm_str(dat):     from sklearn import linear_model     regr = linear_model.LinearRegression()     import pandas as pd     dat = pd.get_dummies(dat, drop_first=True)     X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]     y = dat[[\"SEPAL_LENGTH\"]]     regr.fit(X, y)     return regr\tNone\t2022-07-20 08:24:19\nOMLUSER\tRandomRedDots\tdef RandomRedDots (num_dots_1=100, num_dots_2=10):     import numpy as np     import pandas as pd     import matplotlib.pyplot as plt        d = {'id': range(1,10), 'val': [x/100 for x in range(1,10)]}     df = pd.DataFrame(data=d)     fig = plt.figure(1)     ax = fig.add_subplot(111)     ax.scatter(range(0,int(num_dots_1)), np.random.rand(int(num_dots_1)),c='r')     fig.suptitle(\"Random Red Dots\")      fig2 = plt.figure(2)     ax2 = fig2.add_subplot(111)     ax2.scatter(range(0,int(num_dots_2)), np.random.rand(int(num_dots_2)),c='r')     fig2.suptitle(\"Random Red Dots\")     return df\tNone\t2022-03-22 19:44:23\nOMLUSER\tbuild_lm\tdef build_lm(dat, dsname):             from sklearn import linear_model             import oml             regr = linear_model.LinearRegression()             import pandas as pd             X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\"]]             y = dat[[\"SEPAL_LENGTH\"]]             res = regr.fit(X, y)             res_coef = res.coef_             res.df = pd.DataFrame(res_coef, columns = ['Coef_SEPAL_WIDTH','Coef_PETAL_LENGTH','Coef_PETAL_WIDTH'])             oml.ds.save(objs={'regr':regr}, name=dsname, overwrite=True)             return res.df\tNone\t2022-05-26 18:02:35\nOMLUSER\tbuild_lm_1\tdef build_lm_1(dat):     import oml     from sklearn import linear_model     import matplotlib.pyplot as plt      lm = linear_model.LinearRegression()     X = dat[[\"PETAL_WIDTH\"]]     y = dat[[\"PETAL_LENGTH\"]]     mod = lm.fit(X, y)          pred = mod.predict(dat[[\"PETAL_WIDTH\"]])     plt.scatter(dat.loc[:,\"PETAL_WIDTH\"], dat.loc[:,\"PETAL_LENGTH\"])     plt.plot(dat[[\"PETAL_WIDTH\"]], pred, color='blue', linewidth=3)     plt.grid(True)     plt.title('Prediction of Petal Length')          plt.xlabel('Petal Width')     plt.ylabel('Petal Length')     plt.show()     return mod\tNone\t2022-05-05 22:19:55\nOMLUSER\tbuild_lm_rest\tdef build_rest(dat):             from sklearn import linear_model             import oml             regr = linear_model.LinearRegression()             import pandas as pd             dat = pd.get_dummies(dat, drop_first=True)             X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]             y = dat[[\"SEPAL_LENGTH\"]]             regr.fit(X, y)             data = {}             data[\"init_params\"] = regr.get_params()             data[\"model_params\"] = mp = {}             for p in (\"coef_\", \"intercept_\", \"_residues\", \"singular_\"):                 mp[p] = getattr(regr, p).tolist()             return data\tNone\t2022-03-10 00:31:56\nOMLUSER\tdensity_plt\tdef density_plt(dat):     dat.plot(kind='density')     return(True)\tNone\t2022-05-26 18:05:32\nOMLUSER\tgroup_count\tdef group_count(dat):   import oml   import pandas as pd   return pd.DataFrame([(dat[\"SPECIES\"][0], dat.shape[0])], columns = [\"SPECIES\", \"COUNT\"])\tNone\t2022-05-26 18:00:06\nOMLUSER\tmyLinearRegressionModel\tdef fit_model(dat, modelName, datastoreName):        import oml        from sklearn import linear_model        regr = linear_model.LinearRegression()        regr.fit(dat.loc[:, [\"Sepal_Length\",                              \"Sepal_Width\",                              \"Petal_Length\"]],                 dat.loc[:,[\"Petal_Width\"]])        oml.ds.save(objs={modelName:regr},                     name=datastoreName,                    overwrite=True)        return str(regr)\tNone\t2022-02-09 18:11:59\nOMLUSER\tscore_mod\tdef score_mod(dat, dsname):             import oml             import pandas as pd             import matplotlib.pyplot as plt             obj_dict = oml.ds.load(name=dsname, to_globals=False)               regr = obj_dict[\"regr\"]                                                   pred = regr.predict(dat[['SEPAL_WIDTH','PETAL_LENGTH','PETAL_WIDTH']])                return pd.concat([dat[['SPECIES', 'SEPAL_LENGTH']], pd.DataFrame(pred, columns=['Pred_SEPAL_LENGTH'])], axis=1)\tNone\t2022-05-26 18:04:26\nOMLUSER\tsk_svc_fit\tdef fit(data):      from sklearn.svm import LinearSVC     x = data.drop('SPECIES', axis = 1).values     y = data['SPECIES']     mod =  LinearSVC().fit(x, y)     return mod\tNone\t2022-05-05 21:20:29\nOMLUSER\ttest_noinp_rest\tdef test_noinp():  import oml  from oml.automl import AlgorithmSelection  df = oml.sync(schema=\"OMLUSER02\", table = \"NARROW\")  train, test = df.split(ratio=(0.9, 0.1), seed = 1234)  X, y = train[:,0:-1], train[:,-1]  X_test, y_test = test[:,0:-1], test[:,-1]  asel = AlgorithmSelection(mining_function=\"classification\",score_metric=\"accuracy\", parallel=4)  scores = [ \"{0}:{1:.3f}\".format(m, s) for m, s in asel.select(X, y, k=None) ]  return(\"Algorithm selection prediction scores:{}\".format(scores))\tNone\t2022-03-08 00:32:47\nPYQSYS\tGLBLM\tdef build_lm2(dat):   from sklearn import linear_model   regr = linear_model.LinearRegression()   X = dat[[\"Petal_Width\"]]   y = dat[[\"Petal_Length\"]]   regr.fit(X, y)   return regr\tNone\t2022-02-11 06:06:44\nPYQSYS\tRandomRedDots\tdef RandomRedDots (num_dots_1 = 100, num_dots_2 = 10):     import numpy as np     import pandas as pd     import matplotlib.pyplot as plt             d = {'id': range(1,10), 'val': [x/100 for x in range(1,10)]}     df = pd.DataFrame(data=d)     plt.scatter(range(0,num_dots_1), np.random.rand(100),c='r')     plt.title(\"Random Red Dots\")     plt.show()     plt.scatter(range(0,num_dots_2), np.random.rand(10),c='r')     plt.title(\"Random Red Dots\")     plt.show()     return df\tNone\t2022-05-04 17:56:17\nPYQSYS\tRandomRedDots2\tdef RandomRedDots2 (num_dots_1 = 100, num_dots_2 = 10):     import numpy as np     import pandas as pd     import matplotlib.pyplot as plt        d = {'id': range(1,10), 'val': [x/100 for x in range(1,10)]}     df = pd.DataFrame(data=d)     fig = plt.figure(1)     ax = fig.add_subplot(111)     ax.scatter(range(0,num_dots_1), np.random.rand(num_dots_1),c='r')     fig.suptitle(\"Random Red Dots\")      fig2 = plt.figure(2)     ax2 = fig2.add_subplot(111)     ax2.scatter(range(0,num_dots_2), np.random.rand(num_dots_2),c='r')     fig2.suptitle(\"Random Red Dots\")     return df\tNone\t2022-05-04 17:56:22\nPYQSYS\tRandomRedDots3\tdef RandomRedDots3 (num_dots_1 = 100, num_dots_2 = 10):     import numpy as np     import pandas as pd     import matplotlib.pyplot as plt      d = {'id': range(1,10), 'val': [x/100 for x in range(1,10)]}     df = pd.DataFrame(data=d)      plt.subplot(2,1, 1)     plt.scatter(range(0,num_dots_1), np.random.rand(num_dots_1),c='r')     plt.title(\"Random Red Dots\")      plt.subplot(2, 1, 2)     plt.scatter(range(0,num_dots_2), np.random.rand(num_dots_2),c='r')     plt.title(\"Random Red Dots\")     return df\tNone\t2022-05-05 22:36:09\nPYQSYS\tTEST\tdef test2():     return print(\"Block 2 done. Starting block 3...\", end=\"\")\tNone\t2021-08-13 17:37:02\nPYQSYS\tTEST4\tdef test4():     return print(\"Block 2 done.\\nStarting block 3...\", end=\"\")\tNone\t2021-08-13 17:42:49\nPYQSYS\tTEST_FUN\tdef test_fun(dat):   import seaborn as sns   import oml   data = oml.sync(dat)   may_flights = FLIGHTS.query(\"month == 'May'\")   flights_wide = FLIGHTS.pivot(\"year\", \"month\", \"passengers\")   sns.lineplot(data=flights_wide)\tNone\t2021-08-13 22:38:54\nPYQSYS\talg_select\tdef alg_select(table, target, parallel):  import oml  from oml import automl  train_data = oml.sync(table=table)  X_train, y_train = train_data.drop(target), train_data[target]  asel = automl.AlgorithmSelection(mining_function='classification', score_metric='accuracy', parallel=parallel)  algo_ranking = asel.select(X_train, y_train, k=1)   best_algo = algo_ranking[0][0]  message = print(\"OML4Py AutoML Algorithm Selection: selected \"+best_algo+\" algorithm\")  return message\tAlgorithm Selection using OML4Py AutoML(string inputs for table and target, numeric input for parallel)\t2021-08-04 00:06:31\nPYQSYS\talgo_select\tdef algo_select(input, mining_function, score_metric, parallel):   import oml   from oml.automl import AlgorithmSelection   df = oml.push(input)   train, test = df.split(ratio=(0.9, 0.1), seed = 1234)   X, y = train[:,0:-1], train[:,-1]   X_test, y_test = test[:,0:-1], test[:,-1]   asel = AlgorithmSelection(mining_function=mining_function, score_metric=score_metric, parallel=parallel)   scores = [ \"{0}:{1:.3f}\".format(m, s) for m, s in asel.select(X, y, k=None) ]   return(\"Algorithm selection prediction scores: {}\".format(scores))\tAutoML algorithm selection with string inputs for data, mining_function, score_metric, and a numeric input for parallel\t2021-08-04 19:57:55\nPYQSYS\tbuild_automl\tdef build_automl(input_df):  import oml  from oml import automl  AUTOML_TABLE=input_df['AUTOML_TABLE'][0]  AUTOML_NAME=input_df['AUTOML_NAME'][0]  AUTOML_TARGET=input_df['AUTOML_TARGET'][0]  AUTOML_PARALLEL=int(input_df['AUTOML_PARALLEL'])  train_data = oml.sync(table=AUTOML_TABLE)  X_train, y_train = train_data.drop(AUTOML_TARGET) , train_data[AUTOML_TARGET]  try:   oml.drop(model=AUTOML_NAME)  except:   pass  asel = automl.AlgorithmSelection(mining_function='classification', score_metric='accuracy', parallel=AUTOML_PARALLEL)  algo_ranking = asel.select(X_train, y_train, k=1)   best_algo = algo_ranking[0][0]  print(\"AutoML Algorithm Selection: selected \"+best_algo+\" algorithm in \"+str(time.strftime(\"%Hh%Mm%Ss\", time.gmtime((time.time() - start)))))  fs_set = automl.FeatureSelection(mining_function = 'classification', score_metric = 'balanced_accuracy', parallel=AUTOML_PARALLEL)  selected_set = fs_set.reduce(best_algo, X_train, y_train, cv='auto', adaptive_sampling=True)  X_train_reduced = X_train[:,selected_set]  print(\"AutoML Feature Selection: selected \"+str(len(X_train_reduced.columns))+\" columns from the original \"+str(len(X_train.columns))+\" in \"+str(time.strftime(\"%Hh%Mm%Ss\", time.gmtime((time.time() - start)))))  atune = automl.ModelTuning(mining_function = 'classification', parallel=AUTOML_PARALLEL)  results_at = atune.tune(best_algo, X_train_reduced, y_train)  final_model = results_at['best_model']  final_model.model_name = AUTOML_NAME  message = print(\"AutoML Tuning successfull for algorithm \"+str(best_algo)+\" using \"+str(len(X_train_reduced.columns))+\" columns into \"+AUTOML_NAME+\" in \"+str(time.strftime(\"%Hh%Mm%Ss\", time.gmtime((time.time() - start)))))  return message\tBuild AutoML model (String inputs for table, name, target and parallel)\t2021-08-03 23:39:03\nPYQSYS\tcompute_random_mean\tdef compute_random_mean(index):     import numpy as np     import scipy     from statistics import mean      np.random.seed(index)     res = np.random.random((100,1))*10     return mean(res[1])\tNone\t2021-11-30 22:57:30\nPYQSYS\tgroup_count\tdef group_count(dat):   import oml   import pandas as pd   return pd.DataFrame([(dat[\"Species\"][0], dat[\"Sepal_Length\"][0], dat.shape[0])],                       columns = [\"Species\", \"Sepal_Length\", \"Count\"])\tNone\t2022-04-20 17:35:40\nPYQSYS\tmy_pred\tdef my_pred(dat):     import pandas as pd     import oml     obj_dict = oml.ds.load(name=\"ds_regr\", to_globals=False)       regr = obj_dict[\"regr\"]     pred = regr.predict(dat[['Sepal_Length',                               'Sepal_Width',                              'Petal_Length']])     return pd.concat([dat[['Species', 'Petal_Width']],                       pd.DataFrame(pred,                                    columns=['Pred_Petal_Width'])],                                    axis=1)\tNone\t2021-04-30 01:02:04\nPYQSYS\tmy_predict\tdef my_predict(dat):     import pandas as pd     import oml     obj_dict = oml.ds.load(name=\"ds_regr\", to_globals=False)       regr = obj_dict[\"regr\"]     pred = regr.predict(dat[['Sepal_Length',                               'Sepal_Width',                              'Petal_Length']])     return pd.concat([dat[['Species', 'Petal_Width']],                       pd.DataFrame(pred,                                    columns=['Pred_Petal_Width'])],                                    axis=1)\tNone\t2021-11-30 22:58:03\nPYQSYS\tpred_lm\tdef pred_lm(dat):     from sklearn import linear_model     import oml          lm = linear_model.LinearRegression()     X = dat[[\"Petal_Width\"]]     y = dat[[\"Petal_Length\"]]     mod = lm.fit(X, y)          pred = mod.predict(dat[[\"Petal_Width\"]])\tNone\t2021-11-30 22:58:15\nPYQSYS\tpred_oml_rf\tdef pred_oml_rf(data_string):  import oml  tab_name = data_string.values[0][0]  dat = oml.sync(table=str(tab_name))  saved_omlrf = oml.rf(model_name='RF_PRED_SPECIES')  output = saved_omlrf.predict(dat.drop('SPECIES'),                                supplemental_cols=dat)  return output\tPred Species OML RF (String table name input)\t2021-06-29 14:46:17\nPYQSYS\tpred_rf_species\tdef pred_rf_species(dat):  import pandas as pd  import oml  obj_dict = oml.ds.load(name=\"ds_rf_species\", to_globals=False)  rf_species = obj_dict[\"rf_species\"]  pred = rf_species.predict(dat[['PETAL_WIDTH',   'SEPAL_WIDTH',  'PETAL_LENGTH',  'PETAL_WIDTH']])  return pd.concat([dat[['PETAL_LENGTH','PETAL_WIDTH',  'SEPAL_LENGTH','SEPAL_WIDTH',  'SPECIES']],   pd.DataFrame(pred,columns=['PREDICTED_SPECIES'])],  axis=1)\tPred Species SKLearn RF (Table input)\t2021-06-29 14:45:41\nPYQSYS\tpred_rf_species_2\tdef pred_rf_species_2(data_string):  import pandas as pd  import oml  obj_dict = oml.ds.load(name=\"ds_rf_species\", to_globals=False)  rf_species = obj_dict[\"rf_species\"]  tab_name = data_string.values[0][0]  dat = oml.sync(table=str(tab_name)).pull()  pred = rf_species.predict(dat[['PETAL_WIDTH',   'SEPAL_WIDTH',  'PETAL_LENGTH',  'PETAL_WIDTH']])  return pd.concat([dat[['PETAL_LENGTH','PETAL_WIDTH',  'SEPAL_LENGTH','SEPAL_WIDTH',  'SPECIES']],   pd.DataFrame(pred,columns=['PREDICTED_SPECIES'])],  axis=1)\tPred Species SKLearn RF (Table name input)\t2021-06-28 23:03:17\nPYQSYS\tpred_rf_species_3\tdef pred_rf_species_3(data_string):  import pandas as pd  import oml  obj_dict = oml.ds.load(name=\"ds_rf_species\", to_globals=False)  rf_species = obj_dict[\"rf_species\"]  print(\"What was received: \")  print(type(data_string))  print(data_string)  tab_name = data_string.values[0][0]  print(\"Table name extracted: \")  print(type(tab_name))  print(tab_name)  try:     dat = oml.sync(table=str(tab_name)).pull()    print ('Loaded the table')    print(dat.head)  except:    print('Unable to load the table')  pred = rf_species.predict(dat[['PETAL_WIDTH',   'SEPAL_WIDTH',  'PETAL_LENGTH',  'PETAL_WIDTH']])  return pd.DataFrame(pred)\tPred Species SKLearn RF (Table name input)\t2021-06-28 15:18:29\nPYQSYS\tthread_process\tdef thread_process(key, value ):             import os                          print('pid :',os.getpid() ,',')             #print ('for: ' ,key)             return [key, value , os.getpid()]\tNone\t2021-12-16 21:49:42\nPYQSYS\ttrain_AML\t def train_aml(dat):    import pandas as pd   import oml  from oml import automl  import numpy as np    #try:  #oml.drop('IRIS4')  #except:  #pass    #print(\"11\")  #IRIS = oml.create(dat, table = \"IRIS4\")  df = oml.push(dat)    #X_reg,y_reg = IRIS.drop('SEPAL_LENGTH'), IRIS['SEPAL_LENGTH']  X_reg,y_reg = df.drop('SEPAL_LENGTH'), df['SEPAL_LENGTH']  #print(\"22\")  #est_reg = automl.AlgorithmSelection(mining_function='regression', score_metric='r2', parallel=2)  est_reg = automl.AlgorithmSelection(mining_function='regression', score_metric='r2', parallel=1)  est_alg_ranking_reg = est_reg.select(X_reg, y_reg ,k=4)    #print(\"33\")  print(\"Ranked algorithms:\", est_alg_ranking_reg)    selected_alg_reg = next(iter(dict(est_alg_ranking_reg).keys()))  #print(\"Best algorithm: \", selected_alg_reg)      #fs_reg = automl.FeatureSelection(mining_function = 'regression', score_metric = 'r2', parallel=2)  fs_reg = automl.FeatureSelection(mining_function = 'regression', score_metric = 'r2', parallel=1)    selected_features_reg = fs_reg.reduce(selected_alg_reg, X_reg, y_reg)    X_reduced_reg = X_reg[:,selected_features_reg]    #print(\"Selected columns:\",X_reduced_reg.columns)  # print(\"Number of columns:\")  #\"{} reduced to {}\".format(len(X_reg.columns), len(selected_features_reg))        #mt_reg = automl.ModelTuning(mining_function = 'regression', parallel=2)  mt_reg = automl.ModelTuning(mining_function = 'regression', parallel=1)  results_reg = mt_reg.tune(selected_alg_reg, X_reduced_reg, y_reg)  tuned_model_reg = results_reg['best_model']      oml.ds.save(objs={'tuned_model_reg':tuned_model_reg}, name=\"trained_aml_regr\", grantable=True, overwrite=True)   #oml.ds.dir()  return_json = {\"status\" : \"Model Built\"}  print(return_json)  return return_json\tNone\t2022-03-29 22:03:10\nPYQSYS\ttrain_AML2\t def train_aml2(dat):    import pandas as pd   import oml  from oml import automl  import numpy as np    df = oml.sync(query = \"select * from IRIS\")  X_reg,y_reg = df.drop('SEPAL_LENGTH'), df['SEPAL_LENGTH']   est_reg = automl.AlgorithmSelection(mining_function='regression', score_metric='r2', parallel=1)  est_alg_ranking_reg = est_reg.select(X_reg, y_reg ,k=4)    print(\"Ranked algorithms:\", est_alg_ranking_reg)    selected_alg_reg = next(iter(dict(est_alg_ranking_reg).keys()))   fs_reg = automl.FeatureSelection(mining_function = 'regression', score_metric = 'r2', parallel=1)    selected_features_reg = fs_reg.reduce(selected_alg_reg, X_reg, y_reg)  X_reduced_reg = X_reg[:,selected_features_reg]   mt_reg = automl.ModelTuning(mining_function = 'regression', parallel=1)  results_reg = mt_reg.tune(selected_alg_reg, X_reduced_reg, y_reg)  tuned_model_reg2 = results_reg['best_model']      oml.ds.save(objs={'tuned_model_reg2':tuned_model_reg2}, name=\"trained_aml_regr2\", grantable=True, overwrite=True)   return_json = {\"status\" : \"Model Built\"}  print(return_json)  return return_json\tNone\t2022-03-29 22:10:04\nPYQSYS\ttrain_automl_embed\tdef train_automl(dat):  import pandas as pd   import oml  from oml import automl  import numpy as np    df = oml.sync(query = \"select * from IRIS\")  X,y = df.drop('SEPAL_LENGTH'), df['SEPAL_LENGTH']   est = automl.AlgorithmSelection(mining_function='regression', score_metric='r2', parallel=True)  est_alg_rank = est.select(X, y, k=4)    print(\"Ranked algorithms:\", est_alg_rank)    selected_alg = next(iter(dict(est_alg_rank).keys()))   fs = automl.FeatureSelection(mining_function='regression', score_metric='r2', parallel=True)    selected_features = fs.reduce(selected_alg, X, y)  X_reduced = X[:,selected_features]   mt = automl.ModelTuning(mining_function='regression', parallel=True)  results = mt.tune(selected_alg, X_reduced, y)    tuned_model = results['best_model']  print(\"Best Model:\", tuned_model)    oml.ds.save(objs={'tuned_model_embed':tuned_model}, name=\"tuned model embed\", grantable=True, overwrite=True)\tNone\t2022-03-30 04:05:06\nPYQSYS\ttrain_automl_string\tdef train_automl_string(input, target, mining_function, score_metric, datastoreName):   # Import libraries  import pandas as pd   import oml  from oml import automl  import numpy as np    # Sync data and define target  df = oml.sync(table=input)  X,y = df.drop(f\"{target}\"), df[f\"{target}\"]    # Algorithm Selection  from oml.automl import AlgorithmSelection  asel = AlgorithmSelection(mining_function=mining_function, score_metric=score_metric)  asel_res = asel.select(X, y, k=None)    # Best algorithm  best_alg = next(iter(dict(asel_res).keys()))  score_asel = [ \"{0}:{1:.3f}\".format(m, s) for m, s in asel.select(X, y, k=None) ]  #return {\"Algorithm selection prediction scores: {}\".format(score_asel)}    # Feature Selection  fs = automl.FeatureSelection(mining_function=mining_function, score_metric=score_metric)  fsel = fs.reduce(best_alg, X, y)  X_reduced = X[:,fsel]  # return {\"Selected columns: {}\".format(X_reduced.columns)}    # Model Tuning  mt = automl.ModelTuning(mining_function=mining_function)  results = mt.tune(best_alg, X_reduced, y)  tuned_model = results['best_model']   # next step: add flag to allow user to choice for persisting results   # Save algorithm selection prediction scores, selected features, and tuned model to the datastore  oml.ds.save(objs={'algorithm selection prediction scores':score_asel,'selected features':X_reduced.columns,'tuned model':tuned_model},     name=datastoreName, grantable=True, overwrite=True)    return(str(\"Algorithm selection prediction scores, selected features, and tuned model saved to datastore: {}\".format(datastoreName)))\tNone\t2022-05-02 19:54:50\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1025974971",
      "id": "20220720-080131_1705249422",
      "dateCreated": "2021-09-21T19:45:56+0000",
      "dateStarted": "2022-07-20T08:24:24+0000",
      "dateFinished": "2022-07-20T08:24:24+0000",
      "status": "FINISHED",
      "$$hashKey": "object:105"
    },
    {
      "text": "%md\n## Learn More\n\n* <a href=\"https://docs.oracle.com/en/database/oracle/machine-learning/oml4py/1/mlpug/about-oml4py-datastores.html#GUID-9FFB5C75-F8DB-4947-844D-4771475A2B39\" onclick=\"return ! window.open('https://docs.oracle.com/en/database/oracle/machine-learning/oml4py/1/mlpug/about-oml4py-datastores.html#GUID-9FFB5C75-F8DB-4947-844D-4771475A2B39');\">About OML4Py Datastores</a>\n* <a href=\"https://docs.oracle.com/en/database/oracle/machine-learning/oml4py/1/mlpug/about-the-script-repository.html#GUID-D62AEE6B-D827-4CE2-B18B-FD1E8249A539\" onclick=\"return ! window.open('https://docs.oracle.com/en/database/oracle/machine-learning/oml4py/1/mlpug/about-the-script-repository.html#GUID-D62AEE6B-D827-4CE2-B18B-FD1E8249A539');\">About OML4Py Script Repository</a>\n* <a href=\"https://docs.oracle.com/en/database/oracle/machine-learning/oml-notebooks/\" onclick=\"return ! window.open('https://docs.oracle.com/en/database/oracle/machine-learning/oml-notebooks/');\">Oracle Machine Learning Notebooks</a>\n \n**Last Updated Date** - July 2022\n \nCopyright (c) 2022 Oracle Corporation \n###### <a href=\"https://oss.oracle.com/licenses/upl/\" onclick=\"return ! window.open('https://oss.oracle.com/licenses/upl/');\">The Universal Permissive License (UPL), Version 1.0</a>\n---",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:24+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<h2>Learn More</h2>\n<ul>\n<li><a href=\"https: //docs.oracle.com/en/database/oracle/machine-learning/oml4py/1/mlpug/about-oml4py-datastores.html#GUID-9FFB5C75-F8DB-4947-844D-4771475A2B39\" onclick=\"return ! window.open('https://docs.oracle.com/en/database/oracle/machine-learning/oml4py/1/mlpug/about-oml4py-datastores.html#GUID-9FFB5C75-F8DB-4947-844D-4771475A2B39');\">About OML4Py Datastores</a></li>\n<li><a href=\"https: //docs.oracle.com/en/database/oracle/machine-learning/oml4py/1/mlpug/about-the-script-repository.html#GUID-D62AEE6B-D827-4CE2-B18B-FD1E8249A539\" onclick=\"return ! window.open('https://docs.oracle.com/en/database/oracle/machine-learning/oml4py/1/mlpug/about-the-script-repository.html#GUID-D62AEE6B-D827-4CE2-B18B-FD1E8249A539');\">About OML4Py Script Repository</a></li>\n<li><a href=\"https: //docs.oracle.com/en/database/oracle/machine-learning/oml-notebooks/\" onclick=\"return ! window.open('https://docs.oracle.com/en/database/oracle/machine-learning/oml-notebooks/');\">Oracle Machine Learning Notebooks</a></li>\n</ul>\n<p><strong>Last Updated Date</strong> - July 2022</p>\n<p>Copyright (c) 2022 Oracle Corporation</p>\n<h6><a href=\"https: //oss.oracle.com/licenses/upl/\" onclick=\"return ! window.open('https://oss.oracle.com/licenses/upl/');\">The Universal Permissive License (UPL), Version 1.0</a></h6>\n<hr />\n"
          }
        ]
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_703054864",
      "id": "20220720-080131_1782290239",
      "dateCreated": "2021-03-20T08:06:41+0000",
      "dateStarted": "2022-07-20T08:24:24+0000",
      "dateFinished": "2022-07-20T08:24:24+0000",
      "status": "FINISHED",
      "$$hashKey": "object:106"
    },
    {
      "text": "%md",
      "user": "OMLUSER",
      "dateUpdated": "2022-07-20T08:24:24+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "md",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "interrupted": false,
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658304091969_1367077174",
      "id": "20220720-080131_1736228983",
      "dateCreated": "2021-03-20T08:06:41+0000",
      "status": "FINISHED",
      "$$hashKey": "object:107"
    }
  ],
  "name": "Lab 4: Store and manage Python objects and user-defined functions",
  "id": "121862",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "ORAD7DCEF6B97:OMLUSER:1444635": [],
    "ORADFCC4BB4BB:OMLUSER:1444635": [],
    "ORA479FE34F66:OMLUSER:1444635": [],
    "MDW72560A8093:shared_process": []
  },
  "config": {
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {
    "isRunning": false
  }
}