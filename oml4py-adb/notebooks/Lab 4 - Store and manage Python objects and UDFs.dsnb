[
  {
    "name" : "Lab 4 - Store and manage Python objects and UDFs",
    "description" : null,
    "tags" : null,
    "version" : "6",
    "layout" : "jupyter",
    "type" : "low",
    "readOnly" : false,
    "snapshot" : false,
    "template" : null,
    "templateConfig" : null,
    "paragraphs" : [
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "# Store and manage Python objects and user-defined functions",
          "",
          "## Introduction",
          "",
          "This lab walks you through the steps to use and work with datastores and the script repository.",
          "",
          "Estimated Lab Time: 20 minutes",
          "",
          "#### About Datastore",
          "**Datastores** exist in the user’s Oracle Database schema. A datastore, and the objects it contains, persist in the database until explicitly deleted. By using a datastore, you can store Python objects in a named datastore entry. This named datastore can then be used in subsequent Python sessions, and even be made available to other users or programs by granting/revoking read permissions.",
          "",
          "Python objects, including OML4Py proxy objects, exist for the duration of the current Python session unless you explicitly save them. You can save one or more Python objects, including OML proxy objects, to a named datastore and then load those objects in a later Python session. This is also useful when using embedded Python execution.",
          "By using a datastore, you can:",
          "* Save OML4Py and other Python objects for use across Python sessions",
          "* Grant or revoke read privilege access to a datastore or its objects to one or more users. You can restore the saved objects in another Python session.",
          "* Easily pass multiple and non-scalar arguments to Python functions for use in embedded Python execution from Python, REST, and SQL  API. **Note:** SQL and REST APIs support passing scalar values, such as datastore name or numeric values, only.",
          "* List available datastores and explore datastore contents",
          "",
          "#### About the Python Script Repository",
          "OML4Py stores **named user-defined functions** called scripts in the script repository.  You can make scripts either private or global. A private script is available only to the owner. A global script is available to any user. For private scripts, the owner of the script may grant the read privilege to other users or revoke that privilege.",
          "",
          "* `oml.script.create` - Creates a script, which contains a single Python function definition, in the script repository.",
          "* `oml.script.dir` - Lists the scripts present in the script repository.",
          "* `oml.script.drop` - Drops a script from the script repository.",
          "* `oml.script.load` - Loads a script from the script repository into a Python session.",
          "* `oml.grant` - Grants read privilege permission to another user to a datastore or script owned by the current user.",
          "* `oml.revoke` - Revokes the read privilege permission that was granted to another user to a datastore or script owned by the current user.",
          "",
          "To illustrate using the Python Script Repository, you will define a function `build_lm1` that will fit a regression model. Using this function, you will then create a script named `MyLM_function`.",
          "",
          "#### Objectives",
          "",
          "In this lab, you will learn how to:",
          "* Move objects between datastore and a Python sessions",
          "* Save Python objects in a datastore",
          "* Save model objects in a datastore",
          "* Load datastore objects into memory",
          "* View datastore and its details",
          "* Manage datastore privileges",
          "* Delete datastores",
          "* Use the Python Script Repository",
          "* Create Scripts in Repository",
          "* Store a function as a global function",
          "* Drop scripts from the Script Repository",
          "",
          "**Copyright (c) 2023 Oracle Corporation**",
          "[The Universal Permissive License (UPL), Version 1.0](https://oss.oracle.com/licenses/upl/)",
          "",
          "---",
          "",
          "#### Task 1: Import libraries supporting OML4Py",
          "",
          "To use OML4Py, first import the module `oml`. Also import the pandas library for pandas-specific functionality.",
          "",
          "Run the following commands to imports the `oml` module and the `Pandas` library. Import the Pandas library to work with oml DataFrames."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h1>Store and manage Python objects and user-defined functions</h1>\n<h2>Introduction</h2>\n<p>This lab walks you through the steps to use and work with datastores and the script repository.</p>\n<p>Estimated Lab Time: 20 minutes</p>\n<h4>About Datastore</h4>\n<p><strong>Datastores</strong> exist in the user’s Oracle Database schema. A datastore, and the objects it contains, persist in the database until explicitly deleted. By using a datastore, you can store Python objects in a named datastore entry. This named datastore can then be used in subsequent Python sessions, and even be made available to other users or programs by granting/revoking read permissions.</p>\n<p>Python objects, including OML4Py proxy objects, exist for the duration of the current Python session unless you explicitly save them. You can save one or more Python objects, including OML proxy objects, to a named datastore and then load those objects in a later Python session. This is also useful when using embedded Python execution.\n<br  />By using a datastore, you can:</p>\n<ul>\n<li>Save OML4Py and other Python objects for use across Python sessions</li>\n<li>Grant or revoke read privilege access to a datastore or its objects to one or more users. You can restore the saved objects in another Python session.</li>\n<li>Easily pass multiple and non-scalar arguments to Python functions for use in embedded Python execution from Python, REST, and SQL  API. <strong>Note:</strong> SQL and REST APIs support passing scalar values, such as datastore name or numeric values, only.</li>\n<li>List available datastores and explore datastore contents</li>\n</ul>\n<h4>About the Python Script Repository</h4>\n<p>OML4Py stores <strong>named user-defined functions</strong> called scripts in the script repository.  You can make scripts either private or global. A private script is available only to the owner. A global script is available to any user. For private scripts, the owner of the script may grant the read privilege to other users or revoke that privilege.</p>\n<ul>\n<li><code>oml.script.create</code> - Creates a script, which contains a single Python function definition, in the script repository.</li>\n<li><code>oml.script.dir</code> - Lists the scripts present in the script repository.</li>\n<li><code>oml.script.drop</code> - Drops a script from the script repository.</li>\n<li><code>oml.script.load</code> - Loads a script from the script repository into a Python session.</li>\n<li><code>oml.grant</code> - Grants read privilege permission to another user to a datastore or script owned by the current user.</li>\n<li><code>oml.revoke</code> - Revokes the read privilege permission that was granted to another user to a datastore or script owned by the current user.</li>\n</ul>\n<p>To illustrate using the Python Script Repository, you will define a function <code>build_lm1</code> that will fit a regression model. Using this function, you will then create a script named <code>MyLM_function</code>.</p>\n<h4>Objectives</h4>\n<p>In this lab, you will learn how to:</p>\n<ul>\n<li>Move objects between datastore and a Python sessions</li>\n<li>Save Python objects in a datastore</li>\n<li>Save model objects in a datastore</li>\n<li>Load datastore objects into memory</li>\n<li>View datastore and its details</li>\n<li>Manage datastore privileges</li>\n<li>Delete datastores</li>\n<li>Use the Python Script Repository</li>\n<li>Create Scripts in Repository</li>\n<li>Store a function as a global function</li>\n<li>Drop scripts from the Script Repository</li>\n</ul>\n<p><strong>Copyright (c) 2023 Oracle Corporation</strong>\n<br  /><a href=\"https://oss.oracle.com/licenses/upl/\">The Universal Permissive License (UPL), Version 1.0</a></p>\n<hr />\n<h4>Task 1: Import libraries supporting OML4Py</h4>\n<p>To use OML4Py, first import the module <code>oml</code>. Also import the pandas library for pandas-specific functionality.</p>\n<p>Run the following commands to imports the <code>oml</code> module and the <code>Pandas</code> library. Import the Pandas library to work with oml DataFrames.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "import pandas as pd",
          "import oml"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [ ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "#### Task 2: Create Pandas DataFrames and load them into Autonomous Database",
          "",
          "In this step, you will work with three data set - IRIS data set, Diabetes data set, and Boston data set. Here, you will learn how to:",
          "",
          "* Load these three data sets and for each combine the target and predictors into a single DataFrame",
          "* Create and display the columns for each data set",
          "* Use the dataframe to explore the datastore functionality",
          "",
          "---",
          "",
          "##### Task 2.1 Sync the IRIS table in the OMLUSER schema",
          "Run the following command to sync the IRIS table in the OMLUSER schema to an OML DataFrame proxy object:"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h4>Task 2: Create Pandas DataFrames and load them into Autonomous Database</h4>\n<p>In this step, you will work with three data set - IRIS data set, Diabetes data set, and Boston data set. Here, you will learn how to:</p>\n<ul>\n<li>Load these three data sets and for each combine the target and predictors into a single DataFrame</li>\n<li>Create and display the columns for each data set</li>\n<li>Use the dataframe to explore the datastore functionality</li>\n</ul>\n<hr />\n<h5>Task 2.1 Sync the IRIS table in the OMLUSER schema</h5>\n<p>Run the following command to sync the IRIS table in the OMLUSER schema to an OML DataFrame proxy object:</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "IRIS = oml.sync(\"OMLUSER\", view = \"IRIS_VIEW\")",
          "",
          "print(IRIS.columns)"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "['SEPAL_LENGTH', 'SEPAL_WIDTH', 'PETAL_LENGTH', 'PETAL_WIDTH', 'SPECIES']\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 2.2 Create the temporary Diabetes table",
          " Run the following script to create the temporary Diabetes table"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 2.2 Create the temporary Diabetes table</h5>\n<p>Run the following script to create the temporary Diabetes table</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "from sklearn import datasets",
          "diabetes = datasets.load_diabetes()",
          "x = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)",
          "y = pd.DataFrame(diabetes.target, columns=['disease_progression'])",
          "",
          "DIABETES_TMP = oml.push(pd.concat([x, y], axis=1))",
          "",
          "print(DIABETES_TMP.columns)"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6', 'disease_progression']\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 2.3 Create the Boston table",
          "Run the following script to create the Boston table proxy object, and also push it to the Database as a new Temporaty table with `oml.push`"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 2.3 Create the Boston table</h5>\n<p>Run the following script to create the Boston table proxy object, and also push it to the Database as a new Temporaty table with <code>oml.push</code></p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "boston = datasets.load_boston()",
          "x = pd.DataFrame(boston.data, columns = boston.feature_names.tolist())",
          "y = pd.DataFrame(boston.target, columns = ['Value'])",
          "",
          "BOSTON_TMP = oml.push(pd.concat([x, y], axis=1))",
          "print(BOSTON_TMP.columns)"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'Value']\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "#### Task 3: Save Python objects to a named datastore ",
          "",
          "In this task you will save the actual iris data set and the temporary BOSTON proxy object to a datastore named `ds_pydata`, overwriting if the named datastore already exists.",
          "",
          "**Note:** You can store actual data objects in a datastore, but large data objects should remain as database tables for performance and scalability.    ",
          "",
          "By storing the `BOSTON_TMP` object, the temporary table will not be deleted when the session terminates.",
          "",
          "---",
          "",
          "##### Task 3.1 Save the tables to the Datastore",
          "Run the following script to save the `IRIS` and `BOSTON_TMP` tables to the Datastore"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h4>Task 3: Save Python objects to a named datastore</h4>\n<p>In this task you will save the actual iris data set and the temporary BOSTON proxy object to a datastore named <code>ds_pydata</code>, overwriting if the named datastore already exists.</p>\n<p><strong>Note:</strong> You can store actual data objects in a datastore, but large data objects should remain as database tables for performance and scalability.</p>\n<p>By storing the <code>BOSTON_TMP</code> object, the temporary table will not be deleted when the session terminates.</p>\n<hr />\n<h5>Task 3.1 Save the tables to the Datastore</h5>\n<p>Run the following script to save the <code>IRIS</code> and <code>BOSTON_TMP</code> tables to the Datastore</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "oml.ds.save(objs={'oml_iris':IRIS, 'oml_boston':BOSTON_TMP},",
          "            name=\"ds_pydata\", description = \"python datasets\",",
          "            overwrite=True)"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [ ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 3.2 Add the Diabetes table to the existing Datastore",
          "Append the `DIABETES_TMP` table to the existing datastore.",
          "",
          "**Note:** The condition `append=TRUE` adds the object to the datastore, if it already exists.  ",
          "The default is `append=False`, and in that case, you will receive an error stating that the datastore exists and it won't be created."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 3.2 Add the Diabetes table to the existing Datastore</h5>\n<p>Append the <code>DIABETES_TMP</code> table to the existing datastore.</p>\n<p><strong>Note:</strong> The condition <code>append=TRUE</code> adds the object to the datastore, if it already exists.\n<br  />The default is <code>append=False</code>, and in that case, you will receive an error stating that the datastore exists and it won't be created.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "oml.ds.save(objs={'oml_diabetes':DIABETES_TMP}, name=\"ds_pydata\", append=True)"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [ ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 3.3 Save the IRIS table to a different datastore and list the existing ones",
          "",
          "Save the `IRIS` table to a new datastore, and then list the datastores. ",
          "Notice that you see the datastore name, the number of objects in the datastore, the size in bytes consumed, when the datastore was create/updated, and any description provided by the user. ",
          "The two datastores `ds_iris_data` and `ds_pydata` are present, with the latter containing the three objects you added."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 3.3 Save the IRIS table to a different datastore and list the existing ones</h5>\n<p>Save the <code>IRIS</code> table to a new datastore, and then list the datastores.\n<br  />Notice that you see the datastore name, the number of objects in the datastore, the size in bytes consumed, when the datastore was create/updated, and any description provided by the user.\n<br  />The two datastores <code>ds_iris_data</code> and <code>ds_pydata</code> are present, with the latter containing the three objects you added.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "oml.ds.save(objs={'iris':IRIS},",
          "name=\"ds_iris_data\", description = \"iris dataset\", overwrite=True)",
          "",
          "z.show(oml.ds.dir())"
        ],
        "selectedVisualization" : "table",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "datastore_name\tobject_count\tsize\tdate\tdescription\nds-1\t3\t1662\t2023-07-14 14:47:48\tNone\nds1\t1\t1246\t2023-07-18 20:07:25\tNone\nds_iris_data\t1\t697\t2023-07-23 03:43:37\tiris dataset\nds_pydata\t3\t2622\t2023-07-23 03:43:30\tpython datasets\n",
              "type" : "TABLE"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "#### Task 4: Save model objects in a datastore",
          "",
          "This task illustrates how to store other types of objects in datastores. For this, you will create regression models using sklearn and OML4Py.",
          "",
          "---",
          "",
          "##### Task 4.1 Build two regression models, an open-source `LinearRegression` and an in-Database `oml.glm`",
          "Run the following script to build two regression models - `regr1` and `regr2`. ",
          "The `regr1` uses the open  source function `LinearRegression()` and the `regr2` uses the OML function `oml.glm()`.",
          "",
          "**Note:** This highlights that both open source models and in-database model proxy objects can be stored in a datastore. ",
          "Like tables created using `oml.push` function, default-named model proxy objects are dropped at the end of the database connection unless they are saved in a datastore."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h4>Task 4: Save model objects in a datastore</h4>\n<p>This task illustrates how to store other types of objects in datastores. For this, you will create regression models using sklearn and OML4Py.</p>\n<hr />\n<h5>Task 4.1 Build two regression models, an open-source <code>LinearRegression</code> and an in-Database <code>oml.glm</code></h5>\n<p>Run the following script to build two regression models - <code>regr1</code> and <code>regr2</code>.\n<br  />The <code>regr1</code> uses the open  source function <code>LinearRegression()</code> and the <code>regr2</code> uses the OML function <code>oml.glm()</code>.</p>\n<p><strong>Note:</strong> This highlights that both open source models and in-database model proxy objects can be stored in a datastore.\n<br  />Like tables created using <code>oml.push</code> function, default-named model proxy objects are dropped at the end of the database connection unless they are saved in a datastore.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "from sklearn import linear_model",
          "",
          "regr1 = linear_model.LinearRegression()",
          "regr1.fit(boston.data, boston.target)",
          "",
          "regr2 = oml.glm(\"regression\")",
          "X = BOSTON_TMP.drop('Value')",
          "y = BOSTON_TMP['Value']",
          "regr2 = regr2.fit(X, y)"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [ ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 4.2 Save both model objects to a new datastore",
          "Run the following script to save the objects `regr1` and `regr2` to the datastore `ds_pymodels`, and allow the read privilege to be granted to them.",
          "",
          "**Note:** `overwrite=True` indicates that the contents of the datastore should be replaced."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 4.2 Save both model objects to a new datastore</h5>\n<p>Run the following script to save the objects <code>regr1</code> and <code>regr2</code> to the datastore <code>ds_pymodels</code>, and allow the read privilege to be granted to them.</p>\n<p><strong>Note:</strong> <code>overwrite=True</code> indicates that the contents of the datastore should be replaced.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "oml.ds.save(objs={'regr1':regr1, 'regr2':regr2},",
          "            name=\"ds_pymodels\", grantable=True,",
          "            overwrite=True)",
          "",
          "z.show(oml.ds.dir())"
        ],
        "selectedVisualization" : "table",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "datastore_name\tobject_count\tsize\tdate\tdescription\nds-1\t3\t1662\t2023-07-14 14:47:48\tNone\nds1\t1\t1246\t2023-07-18 20:07:25\tNone\nds_iris_data\t1\t697\t2023-07-23 03:43:37\tiris dataset\nds_pydata\t3\t2622\t2023-07-23 03:43:30\tpython datasets\nds_pymodels\t2\t4373\t2023-07-23 03:43:40\tNone\n",
              "type" : "TABLE"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 4.3 Grant read privilege on the datastore to all users",
          "",
          "Now grant the read privilege to all users by specifying `user=None`. Finally, list the datastores to which the read privilege has been granted."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 4.3 Grant read privilege on the datastore to all users</h5>\n<p>Now grant the read privilege to all users by specifying <code>user=None</code>. Finally, list the datastores to which the read privilege has been granted.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "oml.grant(name=\"ds_pymodels\", typ=\"datastore\", user=None)",
          "",
          "oml.ds.dir(dstype=\"grant\")"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "  datastore_name grantee\n0    ds_pymodels  PUBLIC\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "#### Task 5:  Load datastore objects into memory",
          "",
          "In this step, you load all Python objects from a datastore to the global workspace and sort the result by name. Notice that they have the name specified in the dictionary when saved.",
          "",
          "---",
          "",
          "##### Task 5.1 Load the datastore `ds_pydata` into memory",
          "Run the following script to load the datastore `ds_pydata` into memory"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h4>Task 5:  Load datastore objects into memory</h4>\n<p>In this step, you load all Python objects from a datastore to the global workspace and sort the result by name. Notice that they have the name specified in the dictionary when saved.</p>\n<hr />\n<h5>Task 5.1 Load the datastore <code>ds_pydata</code> into memory</h5>\n<p>Run the following script to load the datastore <code>ds_pydata</code> into memory</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "sorted(oml.ds.load(name=\"ds_pydata\"))"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "['oml_boston', 'oml_diabetes', 'oml_iris']\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 5.2 Load object `regr2` (regression model) into the global workspace",
          "",
          "Run the following script to load the named Python object `regr2` (regression model), from the datastore to the global workspace.",
          "",
          "**Note:** Using the boolean `to_globals` parameter, you can specify whether the objects are loaded to a global workspace or to a dictionary object. If the argument is `to_globals=True`, then `oml.ds.load` function loads the objects into the global workspace. If the argument is `to_globals=False`, then the function returns a dict object that contains pairs of object names and values."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 5.2 Load object <code>regr2</code> (regression model) into the global workspace</h5>\n<p>Run the following script to load the named Python object <code>regr2</code> (regression model), from the datastore to the global workspace.</p>\n<p><strong>Note:</strong> Using the boolean <code>to_globals</code> parameter, you can specify whether the objects are loaded to a global workspace or to a dictionary object. If the argument is <code>to_globals=True</code>, then <code>oml.ds.load</code> function loads the objects into the global workspace. If the argument is <code>to_globals=False</code>, then the function returns a dict object that contains pairs of object names and values.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "oml.ds.load(name=\"ds_pymodels\", objs=[\"regr2\"], to_globals=True)"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "['regr2']\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 5.3 View the model details",
          "",
          "Run the following script to view the model details"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 5.3 View the model details</h5>\n<p>Run the following script to view the model details</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "regr2"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : "[{\"raw\":{\"height\":400,\"lastColumns\":[],\"version\":1}}]",
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "\nAlgorithm Name: Generalized Linear Model\n\nMining Function: REGRESSION\n\nTarget: Value\n\nSettings: \n                   setting name                  setting value\n0                     ALGO_NAME  ALGO_GENERALIZED_LINEAR_MODEL\n1               GLMS_CONF_LEVEL                            .95\n2           GLMS_FTR_GENERATION    GLMS_FTR_GENERATION_DISABLE\n3            GLMS_FTR_SELECTION     GLMS_FTR_SELECTION_DISABLE\n4                  ODMS_DETAILS                    ODMS_ENABLE\n5  ODMS_MISSING_VALUE_TREATMENT        ODMS_MISSING_VALUE_AUTO\n6                 ODMS_SAMPLING          ODMS_SAMPLING_DISABLE\n7                     PREP_AUTO                             ON\n\nComputed Settings: \n            setting name            setting value\n0    GLMS_CONV_TOLERANCE  .0000050000000000000004\n1    GLMS_NUM_ITERATIONS                       30\n2  GLMS_RIDGE_REGRESSION   GLMS_RIDGE_REG_DISABLE\n3            GLMS_SOLVER         GLMS_SOLVER_CHOL\n\nGlobal Statistics: \n             attribute name attribute value\n0         ADJUSTED_R_SQUARE         0.73379\n1                       AIC         1589.64\n2                 COEFF_VAR         21.0595\n3                 CONVERGED             YES\n4        CORRECTED_TOTAL_DF             505\n5          CORRECTED_TOT_SS         42716.3\n6            DEPENDENT_MEAN         22.5328\n7                  ERROR_DF             492\n8         ERROR_MEAN_SQUARE         22.5179\n9         ERROR_SUM_SQUARES         11078.8\n10                  F_VALUE         108.077\n11                    GMSEP         23.1597\n12               HOCKING_SP       0.0458612\n13                      J_P         23.1409\n14                 MODEL_DF              13\n15          MODEL_F_P_VALUE               0\n16        MODEL_MEAN_SQUARE         2433.65\n17        MODEL_SUM_SQUARES         31637.5\n18               NUM_PARAMS              14\n19                 NUM_ROWS             506\n20          RANK_DEFICIENCY               0\n21             ROOT_MEAN_SQ          4.7453\n22                     R_SQ        0.740643\n23                     SBIC         1648.81\n24  VALID_COVARIANCE_MATRIX             YES\n\nAttributes: \nAGE\nB\nCHAS\nCRIM\nDIS\nINDUS\nLSTAT\nNOX\nPTRATIO\nRAD\nRM\nTAX\nZN\n\nPartition: NO\n\nCoefficients: \n\n   attribute name attribute value  ...       p value  significance code\n0     (Intercept)            None  ...  3.283438e-12                ***\n1             AGE            None  ...  9.582293e-01                   \n2               B            None  ...  5.728592e-04                ***\n3            CHAS            None  ...  1.925030e-03                 **\n4            CRIM            None  ...  1.086810e-03                 **\n5             DIS            None  ...  6.013491e-13                ***\n6           INDUS            None  ...  7.382881e-01                   \n7           LSTAT            None  ...  7.776912e-23                ***\n8             NOX            None  ...  4.245644e-06                ***\n9         PTRATIO            None  ...  1.308835e-12                ***\n10            RAD            None  ...  5.070529e-06                ***\n11             RM            None  ...  1.979441e-18                ***\n12            TAX            None  ...  1.111637e-03                 **\n13             ZN            None  ...  7.781097e-04                ***\n\n[14 rows x 7 columns]\n\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 '\n\nFit Details: \n\n                       name         value\n0         ADJUSTED_R_SQUARE      0.733790\n1                       AIC   1589.642798\n2                 COEFF_VAR     21.059508\n3        CORRECTED_TOTAL_DF    505.000000\n4          CORRECTED_TOT_SS  42716.295415\n5            DEPENDENT_MEAN     22.532806\n6                  ERROR_DF    492.000000\n7         ERROR_MEAN_SQUARE     22.517855\n8         ERROR_SUM_SQUARES  11078.784578\n9                   F_VALUE    108.076666\n10                    GMSEP     23.159731\n11               HOCKING_SP      0.045861\n12                      J_P     23.140878\n13          MODEL_CONVERGED      1.000000\n14                 MODEL_DF     13.000000\n15          MODEL_F_P_VALUE      0.000000\n16        MODEL_MEAN_SQUARE   2433.654680\n17        MODEL_SUM_SQUARES  31637.510837\n18               NUM_PARAMS     14.000000\n19                 NUM_ROWS    506.000000\n20          RANK_DEFICIENCY      0.000000\n21             ROOT_MEAN_SQ      4.745298\n22                     R_SQ      0.740643\n23                     SBIC   1648.814312\n24  VALID_COVARIANCE_MATRIX      1.000000\n\nRank: \n\n14\n\nDeviance: \n\n11078.784578\n\nAIC: \n\n1590\n\nNull Deviance: \n\n42716.295415\n\nDF Residual: \n\n492.0\n\nDF Null: \n\n505.0\n\nConverged: \n\nTrue\n\n\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### 5.4 Load the object `regr1` into the user's workspace",
          "Run the following script to load the named Python object `regr1`, from the datastore to the user's workspace.",
          "",
          "**Note:** Using the boolean `to_globals` parameter, you can specify whether the objects are loaded to a global workspace or to a dictionary object. If the argument is `to_globals=True`, then `oml.ds.load` function loads the objects into the global workspace. If the argument is `to_globals=False`, then the function returns a dict object that contains pairs of object names and values."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>5.4 Load the object <code>regr1</code> into the user's workspace</h5>\n<p>Run the following script to load the named Python object <code>regr1</code>, from the datastore to the user's workspace.</p>\n<p><strong>Note:</strong> Using the boolean <code>to_globals</code> parameter, you can specify whether the objects are loaded to a global workspace or to a dictionary object. If the argument is <code>to_globals=True</code>, then <code>oml.ds.load</code> function loads the objects into the global workspace. If the argument is <code>to_globals=False</code>, then the function returns a dict object that contains pairs of object names and values.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "oml.ds.load(name=\"ds_pymodels\", objs=[\"regr1\"], to_globals=False)"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "{'regr1': LinearRegression()}\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "#### Task 6: View datastores and other details",
          "",
          "This task shows how to work with datastores.",
          "",
          "---",
          "",
          "##### Task 6.1 List the datastore entries",
          "Run the following script to get the list of named datastore entries and a count of the objects in each."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h4>Task 6: View datastores and other details</h4>\n<p>This task shows how to work with datastores.</p>\n<hr />\n<h5>Task 6.1 List the datastore entries</h5>\n<p>Run the following script to get the list of named datastore entries and a count of the objects in each.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "z.show(oml.ds.dir(dstype=\"all\")[['owner', 'datastore_name', 'object_count']])"
        ],
        "selectedVisualization" : "table",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "owner\tdatastore_name\tobject_count\nOMLUSER\tds-1\t3\nOMLUSER\tds1\t1\nOMLUSER\tds_iris_data\t1\nOMLUSER\tds_pydata\t3\nOMLUSER\tds_pymodels\t2\n",
              "type" : "TABLE"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 6.2 List datastores that other users have access to",
          "",
          "Run the following script to list the datastores to which other users have been granted the read privilege"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 6.2 List datastores that other users have access to</h5>\n<p>Run the following script to list the datastores to which other users have been granted the read privilege</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "oml.ds.dir(dstype=\"grant\")"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "  datastore_name grantee\n0    ds_pymodels  PUBLIC\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "#### Task 7: View contents of a datastore",
          "",
          "This task shows how to view and describe the content of a datastore. This example shows the `ds_pydata` datastore. Notice that the three proxy objects are listed.",
          "",
          "---",
          "",
          "##### Task 7.1 List the contents of a datastore",
          "",
          "Run the following script to list the content of a datastore. The script returns the description of three proxy objects - `oml_iris`, `oml_boston`, and `oml_diabetes`. It lists the class, size, length, row and column count for each object.     "
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h4>Task 7: View contents of a datastore</h4>\n<p>This task shows how to view and describe the content of a datastore. This example shows the <code>ds_pydata</code> datastore. Notice that the three proxy objects are listed.</p>\n<hr />\n<h5>Task 7.1 List the contents of a datastore</h5>\n<p>Run the following script to list the content of a datastore. The script returns the description of three proxy objects - <code>oml_iris</code>, <code>oml_boston</code>, and <code>oml_diabetes</code>. It lists the class, size, length, row and column count for each object.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "z.show(oml.ds.describe(name='ds_pydata'))"
        ],
        "selectedVisualization" : "table",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "object_name\tclass\tsize\tlength\trow_count\tcol_count\noml_boston\toml.DataFrame\t1018\t506\t506\t14\noml_diabetes\toml.DataFrame\t908\t442\t442\t11\noml_iris\toml.DataFrame\t696\t150\t150\t5\n",
              "type" : "TABLE"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "#### Task 8: Manage datastore privileges",
          "",
          "This task shows how to revoke read privilege, show datastores to which the read privilege has been granted, and again grant read privilege to a user.",
          "",
          "##### Task 8.1 Revoke read privileges from other users",
          "Run the following script to revoke the read privilege from all other users"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h4>Task 8: Manage datastore privileges</h4>\n<p>This task shows how to revoke read privilege, show datastores to which the read privilege has been granted, and again grant read privilege to a user.</p>\n<h5>Task 8.1 Revoke read privileges from other users</h5>\n<p>Run the following script to revoke the read privilege from all other users</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "oml.revoke(name=\"ds_pymodels\", typ=\"datastore\", user=None)",
          "",
          "oml.ds.dir(dstype=\"grant\")"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "Empty DataFrame\nColumns: [datastore_name, grantee]\nIndex: []\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 8.2 Grant read privilege to user `OMLUSER2`",
          "Run the following script to grant read privilege to `OMLUSER2`.",
          "",
          "Note: If you are running this Notebook on your own tenancy, make sure to follow the instructions on creationg a new OMLUSER2, otherwise you will get an error. "
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 8.2 Grant read privilege to user <code>OMLUSER2</code></h5>\n<p>Run the following script to grant read privilege to <code>OMLUSER2</code>.</p>\n<p>Note: If you are running this Notebook on your own tenancy, make sure to follow the instructions on creationg a new OMLUSER2, otherwise you will get an error.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "oml.grant(name=\"ds_pymodels\", typ=\"datastore\", user=\"OMLUSER2\")",
          "",
          "oml.ds.dir(dstype=\"grant\")"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "  datastore_name   grantee\n0    ds_pymodels  OMLUSER2\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "#### Task 9: Delete Datastore Content",
          "",
          "This task shows how to use the `oml.ds.delete` function to delete datastores or datastore content.",
          "",
          "---",
          "",
          "##### Task 9.1 Delete several datastore contents",
          "Run the following script to delete datastore content in different ways"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h4>Task 9: Delete Datastore Content</h4>\n<p>This task shows how to use the <code>oml.ds.delete</code> function to delete datastores or datastore content.</p>\n<hr />\n<h5>Task 9.1 Delete several datastore contents</h5>\n<p>Run the following script to delete datastore content in different ways</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "oml.ds.delete(name=\"ds_pydata\", objs=[\"IRIS\", \"oml_boston\"])",
          "",
          "oml.ds.delete(name=\"ds_pydata\")",
          "",
          "oml.ds.delete(name=\"_pymodels\", regex_match=True)",
          "",
          "z.show(oml.ds.dir())"
        ],
        "selectedVisualization" : "table",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "datastore_name\tobject_count\tsize\tdate\tdescription\nds-1\t3\t1662\t2023-07-14 14:47:48\tNone\nds1\t1\t1246\t2023-07-18 20:07:25\tNone\nds_iris_data\t1\t697\t2023-07-23 03:43:37\tiris dataset\n",
              "type" : "TABLE"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "#### Task 10: Use the Python Script Repository",
          "In tasks 10 through 15, you  work with Python Script Repository.",
          "",
          "OML4Py stores named user-defined functions called scripts in the script repository.  You can make scripts either private or global. A private script is available only to the owner. A global script is available to any user. For private scripts, the owner of the script may grant the read privilege to other users or revoke that privilege.",
          "",
          "* `oml.script.create` - Creates a script, which contains a single Python function definition, in the script repository.",
          "* `oml.script.dir` - Lists the scripts present in the script repository.",
          "* `oml.script.drop` - Drops a script from the script repository.",
          "* `oml.script.load` - Loads a script from the script repository into a Python session.",
          "* `oml.grant` - Grants read privilege permission to another user to a datastore or script owned by the current user.",
          "* `oml.revoke` - Revokes the read privilege permission that was granted to another user to a datastore or script owned by the current user.",
          "",
          "To illustrate using the Python Script Repository, you will define a function `build_lm1` that fits a regression model. Using this function, you then create a script named `MyLM_function`.",
          "",
          "---",
          "",
          "##### Task 10.1 Define a function to build a model as a string",
          "To store a user-defined function in the script repository, it must be presented as a named string. ",
          "Run the following script to define the function as a string, `build_lm_str`. ",
          "**Note** the use of triple quotes to enable formatting."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h4>Task 10: Use the Python Script Repository</h4>\n<p>In tasks 10 through 15, you  work with Python Script Repository.</p>\n<p>OML4Py stores named user-defined functions called scripts in the script repository.  You can make scripts either private or global. A private script is available only to the owner. A global script is available to any user. For private scripts, the owner of the script may grant the read privilege to other users or revoke that privilege.</p>\n<ul>\n<li><code>oml.script.create</code> - Creates a script, which contains a single Python function definition, in the script repository.</li>\n<li><code>oml.script.dir</code> - Lists the scripts present in the script repository.</li>\n<li><code>oml.script.drop</code> - Drops a script from the script repository.</li>\n<li><code>oml.script.load</code> - Loads a script from the script repository into a Python session.</li>\n<li><code>oml.grant</code> - Grants read privilege permission to another user to a datastore or script owned by the current user.</li>\n<li><code>oml.revoke</code> - Revokes the read privilege permission that was granted to another user to a datastore or script owned by the current user.</li>\n</ul>\n<p>To illustrate using the Python Script Repository, you will define a function <code>build_lm1</code> that fits a regression model. Using this function, you then create a script named <code>MyLM_function</code>.</p>\n<hr />\n<h5>Task 10.1 Define a function to build a model as a string</h5>\n<p>To store a user-defined function in the script repository, it must be presented as a named string.\n<br  />Run the following script to define the function as a string, <code>build_lm_str</code>.\n<br  /><strong>Note</strong> the use of triple quotes to enable formatting.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "build_lm_str = \"\"\"def build_lm_str(dat):",
          "    from sklearn import linear_model",
          "    regr = linear_model.LinearRegression()",
          "    import pandas as pd",
          "    dat = pd.get_dummies(dat, drop_first=True)",
          "    X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]",
          "    y = dat[[\"SEPAL_LENGTH\"]]",
          "    regr.fit(X, y)",
          "    return regr\"\"\""
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [ ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 10.2 View the string created",
          "Run the following script to view the string that you just created:"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 10.2 View the string created</h5>\n<p>Run the following script to view the string that you just created:</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "print(build_lm_str)"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "def build_lm_str(dat):\n    from sklearn import linear_model\n    regr = linear_model.LinearRegression()\n    import pandas as pd\n    dat = pd.get_dummies(dat, drop_first=True)\n    X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]\n    y = dat[[\"SEPAL_LENGTH\"]]\n    regr.fit(X, y)\n    return regr\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "#### Task 11: Create Scripts in Repository",
          "In this task you will use the function `oml.script.create` to create a script `MyLM_function`.",
          "",
          "---",
          "",
          "##### Task 11.1 Save the function to the Script Repository",
          "Run the `oml.script.drop` script first to check if a script by the name `MyLM_function` exists, and drop it if it exists. ",
          "Then use the `oml.script.create` script to create the script `MyLM_function`. ",
          "Note that we have the `overwrite` argument set to `True` in case the function already exists."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h4>Task 11: Create Scripts in Repository</h4>\n<p>In this task you will use the function <code>oml.script.create</code> to create a script <code>MyLM_function</code>.</p>\n<hr />\n<h5>Task 11.1 Save the function to the Script Repository</h5>\n<p>Run the <code>oml.script.drop</code> script first to check if a script by the name <code>MyLM_function</code> exists, and drop it if it exists.\n<br  />Then use the <code>oml.script.create</code> script to create the script <code>MyLM_function</code>.\n<br  />Note that we have the <code>overwrite</code> argument set to <code>True</code> in case the function already exists.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "    ",
          "try:",
          "    oml.script.drop(\"MyLM_function\")",
          "except:",
          "    pass",
          "",
          "oml.script.create(\"MyLM_function\", func=build_lm_str, overwrite=True)"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [ ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 11.2 List the scripts in the repository with read grants",
          "",
          "Run the `oml.script.dir` script to list the scripts to which the read privilege has been granted, and where `sctype` is set to `grant`."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 11.2 List the scripts in the repository with read grants</h5>\n<p>Run the <code>oml.script.dir</code> script to list the scripts to which the read privilege has been granted, and where <code>sctype</code> is set to <code>grant</code>.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "oml.script.dir(sctype=\"grant\")"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "Empty DataFrame\nColumns: [name, grantee]\nIndex: []\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 11.3 Load the function from the script repository",
          "Run the following script to load the named function `MyLM_function` into the Python engine for use as a typical Python function using  `oml.script.load`."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 11.3 Load the function from the script repository</h5>\n<p>Run the following script to load the named function <code>MyLM_function</code> into the Python engine for use as a typical Python function using  <code>oml.script.load</code>.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "import inspect",
          "",
          "MyLM_function = oml.script.load(\"MyLM_function\")",
          "print(\"Type\", type(MyLM_function))",
          "MyLM_function.get_source()",
          "print(str(MyLM_function))",
          "print(MyLM_function.get_source().read())"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "Type <class 'oml.script.script.Callable'>\n<oml.script.script.Callable object at 0x7f534800e410>\ndef build_lm_str(dat):\n    from sklearn import linear_model\n    regr = linear_model.LinearRegression()\n    import pandas as pd\n    dat = pd.get_dummies(dat, drop_first=True)\n    X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]\n    y = dat[[\"SEPAL_LENGTH\"]]\n    regr.fit(X, y)\n    return regr\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 11.4 Extract the function text from the Python object ",
          "Extract the function text string from the function object to save it later in the script repository"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 11.4 Extract the function text from the Python object</h5>\n<p>Extract the function text string from the function object to save it later in the script repository</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "loaded_str = MyLM_function.get_source().read()",
          "",
          "type(loaded_str)"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<class 'str'>\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 11.5 Use the function `oml.script.create` to write the function to the script repository",
          "",
          "Run the script `oml.script.create` to create a test function `MyTEST_function`:"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 11.5 Use the function <code>oml.script.create</code> to write the function to the script repository</h5>\n<p>Run the script <code>oml.script.create</code> to create a test function <code>MyTEST_function</code>:</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "oml.script.create(\"MyTEST_function\", func=loaded_str, overwrite=True)"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [ ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 11.6 List all available scripts in the repository",
          "",
          "Use `oml.script.dir` to list all the available scripts."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 11.6 List all available scripts in the repository</h5>\n<p>Use <code>oml.script.dir</code> to list all the available scripts.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "z.show(oml.script.dir(sctype=\"all\"))"
        ],
        "selectedVisualization" : "table",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "owner\tname\tscript\tdescription\tdate\nOMLUSER\tMyLM_function\tdef build_lm_str(dat):     from sklearn import linear_model     regr = linear_model.LinearRegression()     import pandas as pd     dat = pd.get_dummies(dat, drop_first=True)     X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]     y = dat[[\"SEPAL_LENGTH\"]]     regr.fit(X, y)     return regr\tNone\t2023-07-23 03:43:58\nOMLUSER\tMyTEST_function\tdef build_lm_str(dat):     from sklearn import linear_model     regr = linear_model.LinearRegression()     import pandas as pd     dat = pd.get_dummies(dat, drop_first=True)     X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]     y = dat[[\"SEPAL_LENGTH\"]]     regr.fit(X, y)     return regr\tNone\t2023-07-23 03:43:59\nOMLUSER\tbuild_lm\tdef build_lm(dat, dsname):             from sklearn import linear_model             import oml             regr = linear_model.LinearRegression()             import pandas as pd             X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\"]]             y = dat[[\"SEPAL_LENGTH\"]]             res = regr.fit(X, y)             res_coef = res.coef_             res.df = pd.DataFrame(res_coef, columns = ['Coef_SEPAL_WIDTH','Coef_PETAL_LENGTH','Coef_PETAL_WIDTH'])             oml.ds.save(objs={'regr':regr}, name=dsname, overwrite=True)             return res.df\tNone\t2023-07-18 20:07:16\nOMLUSER\tscore_mod\tdef score_mod(dat, dsname):             import oml             import pandas as pd             import matplotlib.pyplot as plt             obj_dict = oml.ds.load(name=dsname, to_globals=False)               regr = obj_dict[\"regr\"]                                                   pred = regr.predict(dat[['SEPAL_WIDTH','PETAL_LENGTH','PETAL_WIDTH']])                return pd.concat([dat[['SPECIES', 'SEPAL_LENGTH']], pd.DataFrame(pred, columns=['Pred_SEPAL_LENGTH'])], axis=1)\tNone\t2023-07-18 20:08:02\nPYQSYS\tRandomRedDots\tdef RandomRedDots (num_dots_1 = 100, num_dots_2 = 10):     import numpy as np     import pandas as pd     import matplotlib.pyplot as plt      d = {'id': range(1,10), 'val': [x/100 for x in range(1,10)]}     df = pd.DataFrame(data=d)      plt.style.use('seaborn')     plt.figure(figsize=[9,7])      plt.figure(1)     plt.scatter(range(0,num_dots_1), np.random.rand(100),c='r')     plt.title(\"Random Red Dots\")      plt.figure(2)       plt.scatter(range(0,num_dots_2), np.random.rand(10),c='r')     plt.title(\"Random Red Dots\")     plt.rcParams['figure.dpi'] = 128     return df\tNone\t2023-07-14 14:47:49\nPYQSYS\tRandomRedDots2\tdef RandomRedDots2 (num_dots_1 = 100, num_dots_2 = 10):     import numpy as np     import pandas as pd     import matplotlib.pyplot as plt      d = {'id': range(1,10), 'val': [x/100 for x in range(1,10)]}     df = pd.DataFrame(data=d)     fig = plt.figure(1)     plt.style.use('seaborn')     plt.figure(figsize=[9,7])     ax = fig.add_subplot(111)     ax.scatter(range(0,num_dots_1), np.random.rand(num_dots_1),c='r')     fig.suptitle(\"Random Red Dots\")      fig2 = plt.figure(2)     ax2 = fig2.add_subplot(111)     ax2.scatter(range(0,num_dots_2), np.random.rand(num_dots_2),c='r')     fig2.suptitle(\"Random Red Dots\")     plt.rcParams['figure.dpi'] = 256     return df\tNone\t2023-07-14 14:47:52\n",
              "type" : "TABLE"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 11.7 Use the Embedded Python Execution to run the function against the IRIS table",
          "",
          "Call the Embedded Python Execution function `oml.table_apply` using the functions `build_lm_str` and `loaded_str` functions. ",
          "",
          "**Note:** These strings represent the same function `build_lm_str` that was saved to the script repository after assigning the function to a string object. ",
          "",
          "The `loaded_str` is the string representation of the function extracted using `get_source().read()`."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 11.7 Use the Embedded Python Execution to run the function against the IRIS table</h5>\n<p>Call the Embedded Python Execution function <code>oml.table_apply</code> using the functions <code>build_lm_str</code> and <code>loaded_str</code> functions.</p>\n<p><strong>Note:</strong> These strings represent the same function <code>build_lm_str</code> that was saved to the script repository after assigning the function to a string object.</p>\n<p>The <code>loaded_str</code> is the string representation of the function extracted using <code>get_source().read()</code>.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "mod1 = oml.table_apply(data=IRIS, func = build_lm_str)",
          "mod1.coef_"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "array([[ 0.49588894,  0.82924391, -0.31515517, -0.72356196, -1.02349781]])\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Now the same process using the function `loaded_str`"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Now the same process using the function <code>loaded_str</code></h5>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "mod2 = oml.table_apply(data=IRIS, func = loaded_str)",
          "mod2.coef_"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "array([[ 0.49588894,  0.82924391, -0.31515517, -0.72356196, -1.02349781]])\n",
              "type" : "TEXT"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "#### Task 12: Store a function as a global  function",
          "",
          "A global function is one that can be accessed by any user.",
          "",
          "In this step, you will define and save a global function `build_lm3`. You will then call that function `build_lm3` to build another model.",
          "",
          "---",
          "",
          "##### Task 12.1. Define and save the function `build_lm3`"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h4>Task 12: Store a function as a global  function</h4>\n<p>A global function is one that can be accessed by any user.</p>\n<p>In this step, you will define and save a global function <code>build_lm3</code>. You will then call that function <code>build_lm3</code> to build another model.</p>\n<hr />\n<h5>Task 12.1. Define and save the function <code>build_lm3</code></h5>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "build_lm3 = \"\"\"def build_lm3(dat):",
          "    from sklearn import linear_model",
          "    regr = linear_model.LinearRegression()",
          "    X = dat[[\"PETAL_WIDTH\"]]",
          "    y = dat[[\"PETAL_LENGTH\"]]",
          "    regr.fit(X, y)",
          "    return regr\"\"\""
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [ ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "---",
          "##### Task 12.2 Store the function in the script repository as a global function",
          "",
          "Call the function `oml.script.create` to store `build_lm3` as a global function `MyGlobalML_function`, and list the existing scripts in the repository",
          "",
          "**Note:** The global functions are owned by `PYQSYS`"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<hr />\n<h5>Task 12.2 Store the function in the script repository as a global function</h5>\n<p>Call the function <code>oml.script.create</code> to store <code>build_lm3</code> as a global function <code>MyGlobalML_function</code>, and list the existing scripts in the repository</p>\n<p><strong>Note:</strong> The global functions are owned by <code>PYQSYS</code></p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "oml.script.create(\"MyGlobalLM_function\", func=build_lm3, is_global=True, overwrite=True)",
          "",
          "z.show(oml.script.dir(sctype=\"all\"))"
        ],
        "selectedVisualization" : "table",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "owner\tname\tscript\tdescription\tdate\nOMLUSER\tMyLM_function\tdef build_lm_str(dat):     from sklearn import linear_model     regr = linear_model.LinearRegression()     import pandas as pd     dat = pd.get_dummies(dat, drop_first=True)     X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]     y = dat[[\"SEPAL_LENGTH\"]]     regr.fit(X, y)     return regr\tNone\t2023-07-23 03:43:58\nOMLUSER\tMyTEST_function\tdef build_lm_str(dat):     from sklearn import linear_model     regr = linear_model.LinearRegression()     import pandas as pd     dat = pd.get_dummies(dat, drop_first=True)     X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]     y = dat[[\"SEPAL_LENGTH\"]]     regr.fit(X, y)     return regr\tNone\t2023-07-23 03:43:59\nOMLUSER\tbuild_lm\tdef build_lm(dat, dsname):             from sklearn import linear_model             import oml             regr = linear_model.LinearRegression()             import pandas as pd             X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\"]]             y = dat[[\"SEPAL_LENGTH\"]]             res = regr.fit(X, y)             res_coef = res.coef_             res.df = pd.DataFrame(res_coef, columns = ['Coef_SEPAL_WIDTH','Coef_PETAL_LENGTH','Coef_PETAL_WIDTH'])             oml.ds.save(objs={'regr':regr}, name=dsname, overwrite=True)             return res.df\tNone\t2023-07-18 20:07:16\nOMLUSER\tscore_mod\tdef score_mod(dat, dsname):             import oml             import pandas as pd             import matplotlib.pyplot as plt             obj_dict = oml.ds.load(name=dsname, to_globals=False)               regr = obj_dict[\"regr\"]                                                   pred = regr.predict(dat[['SEPAL_WIDTH','PETAL_LENGTH','PETAL_WIDTH']])                return pd.concat([dat[['SPECIES', 'SEPAL_LENGTH']], pd.DataFrame(pred, columns=['Pred_SEPAL_LENGTH'])], axis=1)\tNone\t2023-07-18 20:08:02\nPYQSYS\tMyGlobalLM_function\tdef build_lm3(dat):     from sklearn import linear_model     regr = linear_model.LinearRegression()     X = dat[[\"PETAL_WIDTH\"]]     y = dat[[\"PETAL_LENGTH\"]]     regr.fit(X, y)     return regr\tNone\t2023-07-23 03:44:01\nPYQSYS\tRandomRedDots\tdef RandomRedDots (num_dots_1 = 100, num_dots_2 = 10):     import numpy as np     import pandas as pd     import matplotlib.pyplot as plt      d = {'id': range(1,10), 'val': [x/100 for x in range(1,10)]}     df = pd.DataFrame(data=d)      plt.style.use('seaborn')     plt.figure(figsize=[9,7])      plt.figure(1)     plt.scatter(range(0,num_dots_1), np.random.rand(100),c='r')     plt.title(\"Random Red Dots\")      plt.figure(2)       plt.scatter(range(0,num_dots_2), np.random.rand(10),c='r')     plt.title(\"Random Red Dots\")     plt.rcParams['figure.dpi'] = 128     return df\tNone\t2023-07-14 14:47:49\nPYQSYS\tRandomRedDots2\tdef RandomRedDots2 (num_dots_1 = 100, num_dots_2 = 10):     import numpy as np     import pandas as pd     import matplotlib.pyplot as plt      d = {'id': range(1,10), 'val': [x/100 for x in range(1,10)]}     df = pd.DataFrame(data=d)     fig = plt.figure(1)     plt.style.use('seaborn')     plt.figure(figsize=[9,7])     ax = fig.add_subplot(111)     ax.scatter(range(0,num_dots_1), np.random.rand(num_dots_1),c='r')     fig.suptitle(\"Random Red Dots\")      fig2 = plt.figure(2)     ax2 = fig2.add_subplot(111)     ax2.scatter(range(0,num_dots_2), np.random.rand(num_dots_2),c='r')     fig2.suptitle(\"Random Red Dots\")     plt.rcParams['figure.dpi'] = 256     return df\tNone\t2023-07-14 14:47:52\n",
              "type" : "TABLE"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "#### Task 13: Drop scripts from the Script Repository",
          "In this task, you will perform the following:",
          "",
          "* Drop one of the private scripts.",
          "* Drop the global script.",
          "* List the available scripts again.",
          "",
          "**Note:** You can make the script either private or global. A global script is available to any user. A private script is available only to the owner or to users to whom the owner of the script has granted the read privilege.",
          "",
          "---",
          "",
          "##### Task 13.1 Drop two specific the scripts from the repository and then list available scripts",
          "Run the following script to drop the private script `MyLM_function2`, drop the global script `MyGlobalML_function`, and then list the available scripts. The script first deletes the contents of datastore `ds_pydata`, and then deletes the datastore itself. It also deletes the datastore `ds_pymodel` using regular expression pattern matching."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h4>Task 13: Drop scripts from the Script Repository</h4>\n<p>In this task, you will perform the following:</p>\n<ul>\n<li>Drop one of the private scripts.</li>\n<li>Drop the global script.</li>\n<li>List the available scripts again.</li>\n</ul>\n<p><strong>Note:</strong> You can make the script either private or global. A global script is available to any user. A private script is available only to the owner or to users to whom the owner of the script has granted the read privilege.</p>\n<hr />\n<h5>Task 13.1 Drop two specific the scripts from the repository and then list available scripts</h5>\n<p>Run the following script to drop the private script <code>MyLM_function2</code>, drop the global script <code>MyGlobalML_function</code>, and then list the available scripts. The script first deletes the contents of datastore <code>ds_pydata</code>, and then deletes the datastore itself. It also deletes the datastore <code>ds_pymodel</code> using regular expression pattern matching.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python",
          "",
          "oml.script.drop(\"MyLM_function\")",
          "oml.script.drop(\"MyGlobalLM_function\", is_global=True)",
          "z.show(oml.script.dir(sctype=\"all\"))"
        ],
        "selectedVisualization" : "table",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "python.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "owner\tname\tscript\tdescription\tdate\nOMLUSER\tMyTEST_function\tdef build_lm_str(dat):     from sklearn import linear_model     regr = linear_model.LinearRegression()     import pandas as pd     dat = pd.get_dummies(dat, drop_first=True)     X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\", \"SPECIES_versicolor\", \"SPECIES_virginica\"]]     y = dat[[\"SEPAL_LENGTH\"]]     regr.fit(X, y)     return regr\tNone\t2023-07-23 03:43:59\nOMLUSER\tbuild_lm\tdef build_lm(dat, dsname):             from sklearn import linear_model             import oml             regr = linear_model.LinearRegression()             import pandas as pd             X = dat[[\"SEPAL_WIDTH\", \"PETAL_LENGTH\", \"PETAL_WIDTH\"]]             y = dat[[\"SEPAL_LENGTH\"]]             res = regr.fit(X, y)             res_coef = res.coef_             res.df = pd.DataFrame(res_coef, columns = ['Coef_SEPAL_WIDTH','Coef_PETAL_LENGTH','Coef_PETAL_WIDTH'])             oml.ds.save(objs={'regr':regr}, name=dsname, overwrite=True)             return res.df\tNone\t2023-07-18 20:07:16\nOMLUSER\tscore_mod\tdef score_mod(dat, dsname):             import oml             import pandas as pd             import matplotlib.pyplot as plt             obj_dict = oml.ds.load(name=dsname, to_globals=False)               regr = obj_dict[\"regr\"]                                                   pred = regr.predict(dat[['SEPAL_WIDTH','PETAL_LENGTH','PETAL_WIDTH']])                return pd.concat([dat[['SPECIES', 'SEPAL_LENGTH']], pd.DataFrame(pred, columns=['Pred_SEPAL_LENGTH'])], axis=1)\tNone\t2023-07-18 20:08:02\nPYQSYS\tRandomRedDots\tdef RandomRedDots (num_dots_1 = 100, num_dots_2 = 10):     import numpy as np     import pandas as pd     import matplotlib.pyplot as plt      d = {'id': range(1,10), 'val': [x/100 for x in range(1,10)]}     df = pd.DataFrame(data=d)      plt.style.use('seaborn')     plt.figure(figsize=[9,7])      plt.figure(1)     plt.scatter(range(0,num_dots_1), np.random.rand(100),c='r')     plt.title(\"Random Red Dots\")      plt.figure(2)       plt.scatter(range(0,num_dots_2), np.random.rand(10),c='r')     plt.title(\"Random Red Dots\")     plt.rcParams['figure.dpi'] = 128     return df\tNone\t2023-07-14 14:47:49\nPYQSYS\tRandomRedDots2\tdef RandomRedDots2 (num_dots_1 = 100, num_dots_2 = 10):     import numpy as np     import pandas as pd     import matplotlib.pyplot as plt      d = {'id': range(1,10), 'val': [x/100 for x in range(1,10)]}     df = pd.DataFrame(data=d)     fig = plt.figure(1)     plt.style.use('seaborn')     plt.figure(figsize=[9,7])     ax = fig.add_subplot(111)     ax.scatter(range(0,num_dots_1), np.random.rand(num_dots_1),c='r')     fig.suptitle(\"Random Red Dots\")      fig2 = plt.figure(2)     ax2 = fig2.add_subplot(111)     ax2.scatter(range(0,num_dots_2), np.random.rand(num_dots_2),c='r')     fig2.suptitle(\"Random Red Dots\")     plt.rcParams['figure.dpi'] = 256     return df\tNone\t2023-07-14 14:47:52\n",
              "type" : "TABLE"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 12,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "## Learn More",
          "",
          "* [Get started with OML4Py Datastores](https://docs.oracle.com/en/database/oracle/machine-learning/oml4py/2/mlpug/get-started-oracle-machine-learning-python1.html#GUID-C02396D1-2B30-47A0-AE27-37B123E15710)",
          "* [Get started with OML4Py Script Repository](https://docs.oracle.com/en/database/oracle/machine-learning/oml4py/2/mlpug/save-and-manage-functions-for-embedded-python-execution.html#GUID-74671038-15FE-44BB-A657-C89C16C1EF43)",
          "* [Oracle Machine Learning Notebooks](https://docs.oracle.com/en/database/oracle/machine-learning/oml-notebooks/)",
          "* [Oracle Machine Learning Notebooks - Early Adopter](https://docs.oracle.com/en/database/oracle/machine-learning/oml-notebooks/omlug/get-started-notebooks-ea-data-analysis-and-data-visualization.html#GUID-B309C607-2232-43E2-B4A1-655DB295B90B)",
          "",
          "**Last Updated Date** - August 2023",
          "",
          "Copyright (c) 2023 Oracle Corporation ",
          "[The Universal Permissive License (UPL), Version 1.0](https://oss.oracle.com/licenses/upl/)",
          "",
          "---"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "interpreter" : "md.low",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<h2>Learn More</h2>\n<ul>\n<li><a href=\"https://docs.oracle.com/en/database/oracle/machine-learning/oml4py/2/mlpug/get-started-oracle-machine-learning-python1.html#GUID-C02396D1-2B30-47A0-AE27-37B123E15710\">Get started with OML4Py Datastores</a></li>\n<li><a href=\"https://docs.oracle.com/en/database/oracle/machine-learning/oml4py/2/mlpug/save-and-manage-functions-for-embedded-python-execution.html#GUID-74671038-15FE-44BB-A657-C89C16C1EF43\">Get started with OML4Py Script Repository</a></li>\n<li><a href=\"https://docs.oracle.com/en/database/oracle/machine-learning/oml-notebooks/\">Oracle Machine Learning Notebooks</a></li>\n<li><a href=\"https://docs.oracle.com/en/database/oracle/machine-learning/oml-notebooks/omlug/get-started-notebooks-ea-data-analysis-and-data-visualization.html#GUID-B309C607-2232-43E2-B4A1-655DB295B90B\">Oracle Machine Learning Notebooks - Early Adopter</a></li>\n</ul>\n<p><strong>Last Updated Date</strong> - August 2023</p>\n<p>Copyright (c) 2023 Oracle Corporation\n<br  /><a href=\"https://oss.oracle.com/licenses/upl/\">The Universal Permissive License (UPL), Version 1.0</a></p>\n<hr />\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : null
      }
    ]
  }
]